// Code generated by capnpc-go. DO NOT EDIT.

package connector

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
)

type Connector struct{ Client *capnp.Client }

// Connector_TypeID is the unique identifier for the type Connector.
const Connector_TypeID = 0xc33ee7505f042b8e

func (c Connector) Register(ctx context.Context, params func(Connector_register_Params) error) (Connector_register_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc33ee7505f042b8e,
			MethodID:      0,
			InterfaceName: "connector.capnp:Connector",
			MethodName:    "register",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Connector_register_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Connector_register_Results_Future{Future: ans.Future()}, release
}
func (c Connector) Send(ctx context.Context, params func(Connector_send_Params) error) (Connector_send_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc33ee7505f042b8e,
			MethodID:      1,
			InterfaceName: "connector.capnp:Connector",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Connector_send_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Connector_send_Results_Future{Future: ans.Future()}, release
}

func (c Connector) AddRef() Connector {
	return Connector{
		Client: c.Client.AddRef(),
	}
}

func (c Connector) Release() {
	c.Client.Release()
}

// A Connector_Server is a Connector with a local implementation.
type Connector_Server interface {
	Register(context.Context, Connector_register) error

	Send(context.Context, Connector_send) error
}

// Connector_NewServer creates a new Server from an implementation of Connector_Server.
func Connector_NewServer(s Connector_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Connector_Methods(nil, s), s, c, policy)
}

// Connector_ServerToClient creates a new Client from an implementation of Connector_Server.
// The caller is responsible for calling Release on the returned Client.
func Connector_ServerToClient(s Connector_Server, policy *server.Policy) Connector {
	return Connector{Client: capnp.NewClient(Connector_NewServer(s, policy))}
}

// Connector_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Connector_Methods(methods []server.Method, s Connector_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc33ee7505f042b8e,
			MethodID:      0,
			InterfaceName: "connector.capnp:Connector",
			MethodName:    "register",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Register(ctx, Connector_register{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc33ee7505f042b8e,
			MethodID:      1,
			InterfaceName: "connector.capnp:Connector",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, Connector_send{call})
		},
	})

	return methods
}

// Connector_register holds the state for a server call to Connector.register.
// See server.Call for documentation.
type Connector_register struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Connector_register) Args() Connector_register_Params {
	return Connector_register_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Connector_register) AllocResults() (Connector_register_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_register_Results{Struct: r}, err
}

// Connector_send holds the state for a server call to Connector.send.
// See server.Call for documentation.
type Connector_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Connector_send) Args() Connector_send_Params {
	return Connector_send_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Connector_send) AllocResults() (Connector_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connector_send_Results{Struct: r}, err
}

type Connector_register_Params struct{ capnp.Struct }

// Connector_register_Params_TypeID is the unique identifier for the type Connector_register_Params.
const Connector_register_Params_TypeID = 0xaff12e1715aad85b

func NewConnector_register_Params(s *capnp.Segment) (Connector_register_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_register_Params{st}, err
}

func NewRootConnector_register_Params(s *capnp.Segment) (Connector_register_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_register_Params{st}, err
}

func ReadRootConnector_register_Params(msg *capnp.Message) (Connector_register_Params, error) {
	root, err := msg.Root()
	return Connector_register_Params{root.Struct()}, err
}

func (s Connector_register_Params) String() string {
	str, _ := text.Marshal(0xaff12e1715aad85b, s.Struct)
	return str
}

func (s Connector_register_Params) Registration() (RegistrationPacket, error) {
	p, err := s.Struct.Ptr(0)
	return RegistrationPacket{Struct: p.Struct()}, err
}

func (s Connector_register_Params) HasRegistration() bool {
	return s.Struct.HasPtr(0)
}

func (s Connector_register_Params) SetRegistration(v RegistrationPacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRegistration sets the registration field to a newly
// allocated RegistrationPacket struct, preferring placement in s's segment.
func (s Connector_register_Params) NewRegistration() (RegistrationPacket, error) {
	ss, err := NewRegistrationPacket(s.Struct.Segment())
	if err != nil {
		return RegistrationPacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Connector_register_Params_List is a list of Connector_register_Params.
type Connector_register_Params_List struct{ capnp.List }

// NewConnector_register_Params creates a new list of Connector_register_Params.
func NewConnector_register_Params_List(s *capnp.Segment, sz int32) (Connector_register_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connector_register_Params_List{l}, err
}

func (s Connector_register_Params_List) At(i int) Connector_register_Params {
	return Connector_register_Params{s.List.Struct(i)}
}

func (s Connector_register_Params_List) Set(i int, v Connector_register_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connector_register_Params_List) String() string {
	str, _ := text.MarshalList(0xaff12e1715aad85b, s.List)
	return str
}

// Connector_register_Params_Future is a wrapper for a Connector_register_Params promised by a client call.
type Connector_register_Params_Future struct{ *capnp.Future }

func (p Connector_register_Params_Future) Struct() (Connector_register_Params, error) {
	s, err := p.Future.Struct()
	return Connector_register_Params{s}, err
}

func (p Connector_register_Params_Future) Registration() RegistrationPacket_Future {
	return RegistrationPacket_Future{Future: p.Future.Field(0, nil)}
}

type Connector_register_Results struct{ capnp.Struct }

// Connector_register_Results_TypeID is the unique identifier for the type Connector_register_Results.
const Connector_register_Results_TypeID = 0xd25ce5887117e8d6

func NewConnector_register_Results(s *capnp.Segment) (Connector_register_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_register_Results{st}, err
}

func NewRootConnector_register_Results(s *capnp.Segment) (Connector_register_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_register_Results{st}, err
}

func ReadRootConnector_register_Results(msg *capnp.Message) (Connector_register_Results, error) {
	root, err := msg.Root()
	return Connector_register_Results{root.Struct()}, err
}

func (s Connector_register_Results) String() string {
	str, _ := text.Marshal(0xd25ce5887117e8d6, s.Struct)
	return str
}

func (s Connector_register_Results) Confirmation() (ConfirmationPacket, error) {
	p, err := s.Struct.Ptr(0)
	return ConfirmationPacket{Struct: p.Struct()}, err
}

func (s Connector_register_Results) HasConfirmation() bool {
	return s.Struct.HasPtr(0)
}

func (s Connector_register_Results) SetConfirmation(v ConfirmationPacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewConfirmation sets the confirmation field to a newly
// allocated ConfirmationPacket struct, preferring placement in s's segment.
func (s Connector_register_Results) NewConfirmation() (ConfirmationPacket, error) {
	ss, err := NewConfirmationPacket(s.Struct.Segment())
	if err != nil {
		return ConfirmationPacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Connector_register_Results_List is a list of Connector_register_Results.
type Connector_register_Results_List struct{ capnp.List }

// NewConnector_register_Results creates a new list of Connector_register_Results.
func NewConnector_register_Results_List(s *capnp.Segment, sz int32) (Connector_register_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connector_register_Results_List{l}, err
}

func (s Connector_register_Results_List) At(i int) Connector_register_Results {
	return Connector_register_Results{s.List.Struct(i)}
}

func (s Connector_register_Results_List) Set(i int, v Connector_register_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connector_register_Results_List) String() string {
	str, _ := text.MarshalList(0xd25ce5887117e8d6, s.List)
	return str
}

// Connector_register_Results_Future is a wrapper for a Connector_register_Results promised by a client call.
type Connector_register_Results_Future struct{ *capnp.Future }

func (p Connector_register_Results_Future) Struct() (Connector_register_Results, error) {
	s, err := p.Future.Struct()
	return Connector_register_Results{s}, err
}

func (p Connector_register_Results_Future) Confirmation() ConfirmationPacket_Future {
	return ConfirmationPacket_Future{Future: p.Future.Field(0, nil)}
}

type Connector_send_Params struct{ capnp.Struct }

// Connector_send_Params_TypeID is the unique identifier for the type Connector_send_Params.
const Connector_send_Params_TypeID = 0xcf4c4934b3eb5031

func NewConnector_send_Params(s *capnp.Segment) (Connector_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_send_Params{st}, err
}

func NewRootConnector_send_Params(s *capnp.Segment) (Connector_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Connector_send_Params{st}, err
}

func ReadRootConnector_send_Params(msg *capnp.Message) (Connector_send_Params, error) {
	root, err := msg.Root()
	return Connector_send_Params{root.Struct()}, err
}

func (s Connector_send_Params) String() string {
	str, _ := text.Marshal(0xcf4c4934b3eb5031, s.Struct)
	return str
}

func (s Connector_send_Params) Message() (OutgoingMessagePacket, error) {
	p, err := s.Struct.Ptr(0)
	return OutgoingMessagePacket{Struct: p.Struct()}, err
}

func (s Connector_send_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s Connector_send_Params) SetMessage(v OutgoingMessagePacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMessage sets the message field to a newly
// allocated OutgoingMessagePacket struct, preferring placement in s's segment.
func (s Connector_send_Params) NewMessage() (OutgoingMessagePacket, error) {
	ss, err := NewOutgoingMessagePacket(s.Struct.Segment())
	if err != nil {
		return OutgoingMessagePacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Connector_send_Params_List is a list of Connector_send_Params.
type Connector_send_Params_List struct{ capnp.List }

// NewConnector_send_Params creates a new list of Connector_send_Params.
func NewConnector_send_Params_List(s *capnp.Segment, sz int32) (Connector_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Connector_send_Params_List{l}, err
}

func (s Connector_send_Params_List) At(i int) Connector_send_Params {
	return Connector_send_Params{s.List.Struct(i)}
}

func (s Connector_send_Params_List) Set(i int, v Connector_send_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connector_send_Params_List) String() string {
	str, _ := text.MarshalList(0xcf4c4934b3eb5031, s.List)
	return str
}

// Connector_send_Params_Future is a wrapper for a Connector_send_Params promised by a client call.
type Connector_send_Params_Future struct{ *capnp.Future }

func (p Connector_send_Params_Future) Struct() (Connector_send_Params, error) {
	s, err := p.Future.Struct()
	return Connector_send_Params{s}, err
}

func (p Connector_send_Params_Future) Message() OutgoingMessagePacket_Future {
	return OutgoingMessagePacket_Future{Future: p.Future.Field(0, nil)}
}

type Connector_send_Results struct{ capnp.Struct }

// Connector_send_Results_TypeID is the unique identifier for the type Connector_send_Results.
const Connector_send_Results_TypeID = 0xab656055836d1eb7

func NewConnector_send_Results(s *capnp.Segment) (Connector_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connector_send_Results{st}, err
}

func NewRootConnector_send_Results(s *capnp.Segment) (Connector_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Connector_send_Results{st}, err
}

func ReadRootConnector_send_Results(msg *capnp.Message) (Connector_send_Results, error) {
	root, err := msg.Root()
	return Connector_send_Results{root.Struct()}, err
}

func (s Connector_send_Results) String() string {
	str, _ := text.Marshal(0xab656055836d1eb7, s.Struct)
	return str
}

// Connector_send_Results_List is a list of Connector_send_Results.
type Connector_send_Results_List struct{ capnp.List }

// NewConnector_send_Results creates a new list of Connector_send_Results.
func NewConnector_send_Results_List(s *capnp.Segment, sz int32) (Connector_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Connector_send_Results_List{l}, err
}

func (s Connector_send_Results_List) At(i int) Connector_send_Results {
	return Connector_send_Results{s.List.Struct(i)}
}

func (s Connector_send_Results_List) Set(i int, v Connector_send_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Connector_send_Results_List) String() string {
	str, _ := text.MarshalList(0xab656055836d1eb7, s.List)
	return str
}

// Connector_send_Results_Future is a wrapper for a Connector_send_Results promised by a client call.
type Connector_send_Results_Future struct{ *capnp.Future }

func (p Connector_send_Results_Future) Struct() (Connector_send_Results, error) {
	s, err := p.Future.Struct()
	return Connector_send_Results{s}, err
}

type Dispatcher struct{ Client *capnp.Client }

// Dispatcher_TypeID is the unique identifier for the type Dispatcher.
const Dispatcher_TypeID = 0xa481e3c400456884

func (c Dispatcher) DispatchMessage(ctx context.Context, params func(Dispatcher_dispatchMessage_Params) error) (Dispatcher_dispatchMessage_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      0,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchMessage",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dispatcher_dispatchMessage_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dispatcher_dispatchMessage_Results_Future{Future: ans.Future()}, release
}
func (c Dispatcher) DispatchCommand(ctx context.Context, params func(Dispatcher_dispatchCommand_Params) error) (Dispatcher_dispatchCommand_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      1,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchCommand",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dispatcher_dispatchCommand_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dispatcher_dispatchCommand_Results_Future{Future: ans.Future()}, release
}
func (c Dispatcher) DispatchEvent(ctx context.Context, params func(Dispatcher_dispatchEvent_Params) error) (Dispatcher_dispatchEvent_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      2,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchEvent",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Dispatcher_dispatchEvent_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Dispatcher_dispatchEvent_Results_Future{Future: ans.Future()}, release
}

func (c Dispatcher) AddRef() Dispatcher {
	return Dispatcher{
		Client: c.Client.AddRef(),
	}
}

func (c Dispatcher) Release() {
	c.Client.Release()
}

// A Dispatcher_Server is a Dispatcher with a local implementation.
type Dispatcher_Server interface {
	DispatchMessage(context.Context, Dispatcher_dispatchMessage) error

	DispatchCommand(context.Context, Dispatcher_dispatchCommand) error

	DispatchEvent(context.Context, Dispatcher_dispatchEvent) error
}

// Dispatcher_NewServer creates a new Server from an implementation of Dispatcher_Server.
func Dispatcher_NewServer(s Dispatcher_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Dispatcher_Methods(nil, s), s, c, policy)
}

// Dispatcher_ServerToClient creates a new Client from an implementation of Dispatcher_Server.
// The caller is responsible for calling Release on the returned Client.
func Dispatcher_ServerToClient(s Dispatcher_Server, policy *server.Policy) Dispatcher {
	return Dispatcher{Client: capnp.NewClient(Dispatcher_NewServer(s, policy))}
}

// Dispatcher_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Dispatcher_Methods(methods []server.Method, s Dispatcher_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      0,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchMessage",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DispatchMessage(ctx, Dispatcher_dispatchMessage{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      1,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchCommand",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DispatchCommand(ctx, Dispatcher_dispatchCommand{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa481e3c400456884,
			MethodID:      2,
			InterfaceName: "connector.capnp:Dispatcher",
			MethodName:    "dispatchEvent",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.DispatchEvent(ctx, Dispatcher_dispatchEvent{call})
		},
	})

	return methods
}

// Dispatcher_dispatchMessage holds the state for a server call to Dispatcher.dispatchMessage.
// See server.Call for documentation.
type Dispatcher_dispatchMessage struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dispatcher_dispatchMessage) Args() Dispatcher_dispatchMessage_Params {
	return Dispatcher_dispatchMessage_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dispatcher_dispatchMessage) AllocResults() (Dispatcher_dispatchMessage_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchMessage_Results{Struct: r}, err
}

// Dispatcher_dispatchCommand holds the state for a server call to Dispatcher.dispatchCommand.
// See server.Call for documentation.
type Dispatcher_dispatchCommand struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dispatcher_dispatchCommand) Args() Dispatcher_dispatchCommand_Params {
	return Dispatcher_dispatchCommand_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dispatcher_dispatchCommand) AllocResults() (Dispatcher_dispatchCommand_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchCommand_Results{Struct: r}, err
}

// Dispatcher_dispatchEvent holds the state for a server call to Dispatcher.dispatchEvent.
// See server.Call for documentation.
type Dispatcher_dispatchEvent struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Dispatcher_dispatchEvent) Args() Dispatcher_dispatchEvent_Params {
	return Dispatcher_dispatchEvent_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Dispatcher_dispatchEvent) AllocResults() (Dispatcher_dispatchEvent_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchEvent_Results{Struct: r}, err
}

type Dispatcher_dispatchMessage_Params struct{ capnp.Struct }

// Dispatcher_dispatchMessage_Params_TypeID is the unique identifier for the type Dispatcher_dispatchMessage_Params.
const Dispatcher_dispatchMessage_Params_TypeID = 0xc8965c3c52f5d699

func NewDispatcher_dispatchMessage_Params(s *capnp.Segment) (Dispatcher_dispatchMessage_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchMessage_Params{st}, err
}

func NewRootDispatcher_dispatchMessage_Params(s *capnp.Segment) (Dispatcher_dispatchMessage_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchMessage_Params{st}, err
}

func ReadRootDispatcher_dispatchMessage_Params(msg *capnp.Message) (Dispatcher_dispatchMessage_Params, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchMessage_Params{root.Struct()}, err
}

func (s Dispatcher_dispatchMessage_Params) String() string {
	str, _ := text.Marshal(0xc8965c3c52f5d699, s.Struct)
	return str
}

func (s Dispatcher_dispatchMessage_Params) Message() (IncomingMessagePacket, error) {
	p, err := s.Struct.Ptr(0)
	return IncomingMessagePacket{Struct: p.Struct()}, err
}

func (s Dispatcher_dispatchMessage_Params) HasMessage() bool {
	return s.Struct.HasPtr(0)
}

func (s Dispatcher_dispatchMessage_Params) SetMessage(v IncomingMessagePacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewMessage sets the message field to a newly
// allocated IncomingMessagePacket struct, preferring placement in s's segment.
func (s Dispatcher_dispatchMessage_Params) NewMessage() (IncomingMessagePacket, error) {
	ss, err := NewIncomingMessagePacket(s.Struct.Segment())
	if err != nil {
		return IncomingMessagePacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Dispatcher_dispatchMessage_Params_List is a list of Dispatcher_dispatchMessage_Params.
type Dispatcher_dispatchMessage_Params_List struct{ capnp.List }

// NewDispatcher_dispatchMessage_Params creates a new list of Dispatcher_dispatchMessage_Params.
func NewDispatcher_dispatchMessage_Params_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchMessage_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dispatcher_dispatchMessage_Params_List{l}, err
}

func (s Dispatcher_dispatchMessage_Params_List) At(i int) Dispatcher_dispatchMessage_Params {
	return Dispatcher_dispatchMessage_Params{s.List.Struct(i)}
}

func (s Dispatcher_dispatchMessage_Params_List) Set(i int, v Dispatcher_dispatchMessage_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchMessage_Params_List) String() string {
	str, _ := text.MarshalList(0xc8965c3c52f5d699, s.List)
	return str
}

// Dispatcher_dispatchMessage_Params_Future is a wrapper for a Dispatcher_dispatchMessage_Params promised by a client call.
type Dispatcher_dispatchMessage_Params_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchMessage_Params_Future) Struct() (Dispatcher_dispatchMessage_Params, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchMessage_Params{s}, err
}

func (p Dispatcher_dispatchMessage_Params_Future) Message() IncomingMessagePacket_Future {
	return IncomingMessagePacket_Future{Future: p.Future.Field(0, nil)}
}

type Dispatcher_dispatchMessage_Results struct{ capnp.Struct }

// Dispatcher_dispatchMessage_Results_TypeID is the unique identifier for the type Dispatcher_dispatchMessage_Results.
const Dispatcher_dispatchMessage_Results_TypeID = 0xa77b14a8d0f55c91

func NewDispatcher_dispatchMessage_Results(s *capnp.Segment) (Dispatcher_dispatchMessage_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchMessage_Results{st}, err
}

func NewRootDispatcher_dispatchMessage_Results(s *capnp.Segment) (Dispatcher_dispatchMessage_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchMessage_Results{st}, err
}

func ReadRootDispatcher_dispatchMessage_Results(msg *capnp.Message) (Dispatcher_dispatchMessage_Results, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchMessage_Results{root.Struct()}, err
}

func (s Dispatcher_dispatchMessage_Results) String() string {
	str, _ := text.Marshal(0xa77b14a8d0f55c91, s.Struct)
	return str
}

// Dispatcher_dispatchMessage_Results_List is a list of Dispatcher_dispatchMessage_Results.
type Dispatcher_dispatchMessage_Results_List struct{ capnp.List }

// NewDispatcher_dispatchMessage_Results creates a new list of Dispatcher_dispatchMessage_Results.
func NewDispatcher_dispatchMessage_Results_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchMessage_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Dispatcher_dispatchMessage_Results_List{l}, err
}

func (s Dispatcher_dispatchMessage_Results_List) At(i int) Dispatcher_dispatchMessage_Results {
	return Dispatcher_dispatchMessage_Results{s.List.Struct(i)}
}

func (s Dispatcher_dispatchMessage_Results_List) Set(i int, v Dispatcher_dispatchMessage_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchMessage_Results_List) String() string {
	str, _ := text.MarshalList(0xa77b14a8d0f55c91, s.List)
	return str
}

// Dispatcher_dispatchMessage_Results_Future is a wrapper for a Dispatcher_dispatchMessage_Results promised by a client call.
type Dispatcher_dispatchMessage_Results_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchMessage_Results_Future) Struct() (Dispatcher_dispatchMessage_Results, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchMessage_Results{s}, err
}

type Dispatcher_dispatchCommand_Params struct{ capnp.Struct }

// Dispatcher_dispatchCommand_Params_TypeID is the unique identifier for the type Dispatcher_dispatchCommand_Params.
const Dispatcher_dispatchCommand_Params_TypeID = 0x86804ed23d208254

func NewDispatcher_dispatchCommand_Params(s *capnp.Segment) (Dispatcher_dispatchCommand_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchCommand_Params{st}, err
}

func NewRootDispatcher_dispatchCommand_Params(s *capnp.Segment) (Dispatcher_dispatchCommand_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchCommand_Params{st}, err
}

func ReadRootDispatcher_dispatchCommand_Params(msg *capnp.Message) (Dispatcher_dispatchCommand_Params, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchCommand_Params{root.Struct()}, err
}

func (s Dispatcher_dispatchCommand_Params) String() string {
	str, _ := text.Marshal(0x86804ed23d208254, s.Struct)
	return str
}

func (s Dispatcher_dispatchCommand_Params) Command() (CommandPacket, error) {
	p, err := s.Struct.Ptr(0)
	return CommandPacket{Struct: p.Struct()}, err
}

func (s Dispatcher_dispatchCommand_Params) HasCommand() bool {
	return s.Struct.HasPtr(0)
}

func (s Dispatcher_dispatchCommand_Params) SetCommand(v CommandPacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCommand sets the command field to a newly
// allocated CommandPacket struct, preferring placement in s's segment.
func (s Dispatcher_dispatchCommand_Params) NewCommand() (CommandPacket, error) {
	ss, err := NewCommandPacket(s.Struct.Segment())
	if err != nil {
		return CommandPacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Dispatcher_dispatchCommand_Params_List is a list of Dispatcher_dispatchCommand_Params.
type Dispatcher_dispatchCommand_Params_List struct{ capnp.List }

// NewDispatcher_dispatchCommand_Params creates a new list of Dispatcher_dispatchCommand_Params.
func NewDispatcher_dispatchCommand_Params_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchCommand_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dispatcher_dispatchCommand_Params_List{l}, err
}

func (s Dispatcher_dispatchCommand_Params_List) At(i int) Dispatcher_dispatchCommand_Params {
	return Dispatcher_dispatchCommand_Params{s.List.Struct(i)}
}

func (s Dispatcher_dispatchCommand_Params_List) Set(i int, v Dispatcher_dispatchCommand_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchCommand_Params_List) String() string {
	str, _ := text.MarshalList(0x86804ed23d208254, s.List)
	return str
}

// Dispatcher_dispatchCommand_Params_Future is a wrapper for a Dispatcher_dispatchCommand_Params promised by a client call.
type Dispatcher_dispatchCommand_Params_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchCommand_Params_Future) Struct() (Dispatcher_dispatchCommand_Params, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchCommand_Params{s}, err
}

func (p Dispatcher_dispatchCommand_Params_Future) Command() CommandPacket_Future {
	return CommandPacket_Future{Future: p.Future.Field(0, nil)}
}

type Dispatcher_dispatchCommand_Results struct{ capnp.Struct }

// Dispatcher_dispatchCommand_Results_TypeID is the unique identifier for the type Dispatcher_dispatchCommand_Results.
const Dispatcher_dispatchCommand_Results_TypeID = 0x8ee83195118880ed

func NewDispatcher_dispatchCommand_Results(s *capnp.Segment) (Dispatcher_dispatchCommand_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchCommand_Results{st}, err
}

func NewRootDispatcher_dispatchCommand_Results(s *capnp.Segment) (Dispatcher_dispatchCommand_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchCommand_Results{st}, err
}

func ReadRootDispatcher_dispatchCommand_Results(msg *capnp.Message) (Dispatcher_dispatchCommand_Results, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchCommand_Results{root.Struct()}, err
}

func (s Dispatcher_dispatchCommand_Results) String() string {
	str, _ := text.Marshal(0x8ee83195118880ed, s.Struct)
	return str
}

// Dispatcher_dispatchCommand_Results_List is a list of Dispatcher_dispatchCommand_Results.
type Dispatcher_dispatchCommand_Results_List struct{ capnp.List }

// NewDispatcher_dispatchCommand_Results creates a new list of Dispatcher_dispatchCommand_Results.
func NewDispatcher_dispatchCommand_Results_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchCommand_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Dispatcher_dispatchCommand_Results_List{l}, err
}

func (s Dispatcher_dispatchCommand_Results_List) At(i int) Dispatcher_dispatchCommand_Results {
	return Dispatcher_dispatchCommand_Results{s.List.Struct(i)}
}

func (s Dispatcher_dispatchCommand_Results_List) Set(i int, v Dispatcher_dispatchCommand_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchCommand_Results_List) String() string {
	str, _ := text.MarshalList(0x8ee83195118880ed, s.List)
	return str
}

// Dispatcher_dispatchCommand_Results_Future is a wrapper for a Dispatcher_dispatchCommand_Results promised by a client call.
type Dispatcher_dispatchCommand_Results_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchCommand_Results_Future) Struct() (Dispatcher_dispatchCommand_Results, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchCommand_Results{s}, err
}

type Dispatcher_dispatchEvent_Params struct{ capnp.Struct }

// Dispatcher_dispatchEvent_Params_TypeID is the unique identifier for the type Dispatcher_dispatchEvent_Params.
const Dispatcher_dispatchEvent_Params_TypeID = 0xf4492dbdc8d5803b

func NewDispatcher_dispatchEvent_Params(s *capnp.Segment) (Dispatcher_dispatchEvent_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchEvent_Params{st}, err
}

func NewRootDispatcher_dispatchEvent_Params(s *capnp.Segment) (Dispatcher_dispatchEvent_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Dispatcher_dispatchEvent_Params{st}, err
}

func ReadRootDispatcher_dispatchEvent_Params(msg *capnp.Message) (Dispatcher_dispatchEvent_Params, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchEvent_Params{root.Struct()}, err
}

func (s Dispatcher_dispatchEvent_Params) String() string {
	str, _ := text.Marshal(0xf4492dbdc8d5803b, s.Struct)
	return str
}

func (s Dispatcher_dispatchEvent_Params) Event() (UserPacket, error) {
	p, err := s.Struct.Ptr(0)
	return UserPacket{Struct: p.Struct()}, err
}

func (s Dispatcher_dispatchEvent_Params) HasEvent() bool {
	return s.Struct.HasPtr(0)
}

func (s Dispatcher_dispatchEvent_Params) SetEvent(v UserPacket) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewEvent sets the event field to a newly
// allocated UserPacket struct, preferring placement in s's segment.
func (s Dispatcher_dispatchEvent_Params) NewEvent() (UserPacket, error) {
	ss, err := NewUserPacket(s.Struct.Segment())
	if err != nil {
		return UserPacket{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Dispatcher_dispatchEvent_Params_List is a list of Dispatcher_dispatchEvent_Params.
type Dispatcher_dispatchEvent_Params_List struct{ capnp.List }

// NewDispatcher_dispatchEvent_Params creates a new list of Dispatcher_dispatchEvent_Params.
func NewDispatcher_dispatchEvent_Params_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchEvent_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Dispatcher_dispatchEvent_Params_List{l}, err
}

func (s Dispatcher_dispatchEvent_Params_List) At(i int) Dispatcher_dispatchEvent_Params {
	return Dispatcher_dispatchEvent_Params{s.List.Struct(i)}
}

func (s Dispatcher_dispatchEvent_Params_List) Set(i int, v Dispatcher_dispatchEvent_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchEvent_Params_List) String() string {
	str, _ := text.MarshalList(0xf4492dbdc8d5803b, s.List)
	return str
}

// Dispatcher_dispatchEvent_Params_Future is a wrapper for a Dispatcher_dispatchEvent_Params promised by a client call.
type Dispatcher_dispatchEvent_Params_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchEvent_Params_Future) Struct() (Dispatcher_dispatchEvent_Params, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchEvent_Params{s}, err
}

func (p Dispatcher_dispatchEvent_Params_Future) Event() UserPacket_Future {
	return UserPacket_Future{Future: p.Future.Field(0, nil)}
}

type Dispatcher_dispatchEvent_Results struct{ capnp.Struct }

// Dispatcher_dispatchEvent_Results_TypeID is the unique identifier for the type Dispatcher_dispatchEvent_Results.
const Dispatcher_dispatchEvent_Results_TypeID = 0xaffe75e95d5a72c9

func NewDispatcher_dispatchEvent_Results(s *capnp.Segment) (Dispatcher_dispatchEvent_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchEvent_Results{st}, err
}

func NewRootDispatcher_dispatchEvent_Results(s *capnp.Segment) (Dispatcher_dispatchEvent_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Dispatcher_dispatchEvent_Results{st}, err
}

func ReadRootDispatcher_dispatchEvent_Results(msg *capnp.Message) (Dispatcher_dispatchEvent_Results, error) {
	root, err := msg.Root()
	return Dispatcher_dispatchEvent_Results{root.Struct()}, err
}

func (s Dispatcher_dispatchEvent_Results) String() string {
	str, _ := text.Marshal(0xaffe75e95d5a72c9, s.Struct)
	return str
}

// Dispatcher_dispatchEvent_Results_List is a list of Dispatcher_dispatchEvent_Results.
type Dispatcher_dispatchEvent_Results_List struct{ capnp.List }

// NewDispatcher_dispatchEvent_Results creates a new list of Dispatcher_dispatchEvent_Results.
func NewDispatcher_dispatchEvent_Results_List(s *capnp.Segment, sz int32) (Dispatcher_dispatchEvent_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Dispatcher_dispatchEvent_Results_List{l}, err
}

func (s Dispatcher_dispatchEvent_Results_List) At(i int) Dispatcher_dispatchEvent_Results {
	return Dispatcher_dispatchEvent_Results{s.List.Struct(i)}
}

func (s Dispatcher_dispatchEvent_Results_List) Set(i int, v Dispatcher_dispatchEvent_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Dispatcher_dispatchEvent_Results_List) String() string {
	str, _ := text.MarshalList(0xaffe75e95d5a72c9, s.List)
	return str
}

// Dispatcher_dispatchEvent_Results_Future is a wrapper for a Dispatcher_dispatchEvent_Results promised by a client call.
type Dispatcher_dispatchEvent_Results_Future struct{ *capnp.Future }

func (p Dispatcher_dispatchEvent_Results_Future) Struct() (Dispatcher_dispatchEvent_Results, error) {
	s, err := p.Future.Struct()
	return Dispatcher_dispatchEvent_Results{s}, err
}

const schema_962b7a64e96c7802 = "x\xda\x94S]H\x14Q\x14>gf\xee\xac\x84\xe2" +
	"^\xc60\x0c\xb3\xa0 \x93\x16\xd7\xf4\xc5Z]2!" +
	"#cG\xea!SjYo\xee\x86\xb3\xab3kD" +
	"F\x99IZ\x0fB\x85R\xbd\x05\xd1/\xb4BHO" +
	"=DQ\x0aA\xb9\xa4T\xafQ*\x12!$\xbd5" +
	"qgwtX\xb3\xdc\xb7\xe1\x9e\xef|\xe7;\xdfw" +
	"\xa6\xbcF\xf0\x0b^\x92X\x07\xa0\x9e#\xb2y\xb8o" +
	"\xb3/y\xa8\xf72\xd0\x8d\x08@\xd0\x05\xb0\xcbG\xae" +
	"#\xa0\xd2Hj\x01\xcd\xef\xbd\x83t\xd8;;\x94\x02" +
	"H\xbc\xae\x91\xdb\x08\xd2\xaf\xfep\xfd\xab/\x17\xefR" +
	"\xb7h\x0ag:\xe6\xda\xce\x96\x8d\x00\xa0\xd2J>+" +
	"\x11\xe2\x02P\x18y\xa3\xcc\xf1/\xf3Z\xcb\xe2\xfb\x07" +
	"\x05=\xf7\x1d$\x93\x16\x89\xf9l\x93v\xe9\xc8\x09\xf6" +
	"\x18h\x91]yA\xaay\xe5\xd8\xc7G\xeb\x0b=\x0b" +
	"\x89T%\xa5\xec!i\xe2\xca\xc6,e\x13zs\xeb" +
	"\\\xf7\xef\x84\x83\xf4\x13\xb9\xca[\x87\xca\xa4\xe3\x81\x99" +
	"\x9a\x97\x90\xa9m\x82$\x95)K\xdb$\x19P\xb6\xc9" +
	"\\\xdb\xad\xe9\xc5\xa6=-#\xe3N\x07\xf2d\xcb\x81" +
	"b\x99\xcf\xf1\x06\xe6\x9fV6\x1c|\xe7\x14\xe2\x93+" +
	"8\xa0\xde\x02L\xcf\x16v\x0d~mI:\x01Ln" +
	"\xe6\x80.\x0b\xb0\xbbwj\xfc\xf9\xce\x86\x9f\xce\x11\xc3" +
	"r\x1f\x07\xdc\x91k!i\x86b\xd1(\x0b\xc5cD" +
	"\xf7\x84\x82\x9d\xd1\xce\xea}\x11\xa33\x18\x0f\x85\x99\xee" +
	"iK\x7f\xd6\xc54-\x18m\xdb\x1a\x08\xeaA\x0d\x0d" +
	"U\x12%\x00\x09\x01h\xde^\x005GD\xb5@\xc0" +
	"\x0b\xa1\x14\x0c\xdd\xa6v\xb3h\xfe\x89\xd2<\x05\x80\xe8" +
	"\x06\xccjH\x133\xba;\xc4\xb8\xb1\xd4$d6\x89" +
	"L\x0f \xaa\xb9\"qx\x88v\xd0T\xed\x03\x816" +
	"\xb8\x10\x97.\x0c\xedK\xa2>^\xabr\xa1\xb0d\x0c" +
	"\xdaY\xd2R\x1d\x04\xba\xc5e\xda\x82\xb0\x91\x19F\xb0" +
	"\x9d\x81\x1f\x97\xdf\xd2*\x9doPR\x7f\x9aE\xe3~" +
	"\x0c\xe0\xda6M\xf3\xae\xdcT\xb4\x9b\xea\xd2\x0f\xba\xc7" +
	"`\xdc\x92Z\x8et\x00\xa5\x95@\x9d\xb5G\x8c8\xd3" +
	"\xff\x16\xd2)\x005WDu\x83\x80f\x0a\xa7\x07!" +
	"?\x1e\x89E\xd1m\x8e'\xbf\x0d\x07\x8e\xce\xdc\xc8&" +
	"+k\xe1\x94\xfe\xb8\x01\xb02*[\x17ZI\xe5X" +
	"I\xd9\x7f\x15\xdaGK\xbd\x07@\xa0\xa5<)\xfb\xd0" +
	"\xd1\xfe)i\xf1\x0e\x10(u\x99\xf6^\x00\xe0\xc7|" +
	"nG\xf6F\xff\xe7n\xb5\x14\x0c\xdd\xe6h\"O\xa8" +
	"\xdb^9\x9a\xe9\xc5j\xc1\x04J8\xf3\x1a\x88\xab\x0b" +
	"\xcb\xa5\x81\xfe{\x0b\x99\xc4\xff\x0a\xd2>\x8f\xd5\x92\x0c" +
	"\xc5\xa2'#\xba\xb6\x9c\xe4\xeb\x9e*)\x1c\x1e\xbb\x92" +
	"}\x92\x96A\x068'U,\xefQ\xc28\x08\xdd\xe6" +
	"\xdb\xf3\xfb\x85\x0f\xdd?\xa6\xd3\x03\xfe\x04\x00\x00\xff\xff" +
	"\xe7\x9b\xc8\x7f"

func init() {
	schemas.Register(schema_962b7a64e96c7802,
		0x86804ed23d208254,
		0x8ee83195118880ed,
		0xa481e3c400456884,
		0xa77b14a8d0f55c91,
		0xab656055836d1eb7,
		0xaff12e1715aad85b,
		0xaffe75e95d5a72c9,
		0xc33ee7505f042b8e,
		0xc8965c3c52f5d699,
		0xcf4c4934b3eb5031,
		0xd25ce5887117e8d6,
		0xf4492dbdc8d5803b)
}
