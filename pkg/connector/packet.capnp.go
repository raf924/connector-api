// Code generated by capnpc-go. DO NOT EDIT.

package connector

import (
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Timestamp struct{ capnp.Struct }

// Timestamp_TypeID is the unique identifier for the type Timestamp.
const Timestamp_TypeID = 0xb179ae9d8904b61a

func NewTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Timestamp{st}, err
}

func NewRootTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Timestamp{st}, err
}

func ReadRootTimestamp(msg *capnp.Message) (Timestamp, error) {
	root, err := msg.RootPtr()
	return Timestamp{root.Struct()}, err
}

func (s Timestamp) String() string {
	str, _ := text.Marshal(0xb179ae9d8904b61a, s.Struct)
	return str
}

func (s Timestamp) Milliseconds() uint64 {
	return s.Struct.Uint64(0)
}

func (s Timestamp) SetMilliseconds(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Timestamp_List is a list of Timestamp.
type Timestamp_List struct{ capnp.List }

// NewTimestamp creates a new list of Timestamp.
func NewTimestamp_List(s *capnp.Segment, sz int32) (Timestamp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Timestamp_List{l}, err
}

func (s Timestamp_List) At(i int) Timestamp { return Timestamp{s.List.Struct(i)} }

func (s Timestamp_List) Set(i int, v Timestamp) error { return s.List.SetStruct(i, v.Struct) }

func (s Timestamp_List) String() string {
	str, _ := text.MarshalList(0xb179ae9d8904b61a, s.List)
	return str
}

// Timestamp_Promise is a wrapper for a Timestamp promised by a client call.
type Timestamp_Promise struct{ *capnp.Pipeline }

func (p Timestamp_Promise) Struct() (Timestamp, error) {
	s, err := p.Pipeline.Struct()
	return Timestamp{s}, err
}

type Command struct{ capnp.Struct }

// Command_TypeID is the unique identifier for the type Command.
const Command_TypeID = 0xf42c7dd7018cbb03

func NewCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Command{st}, err
}

func NewRootCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Command{st}, err
}

func ReadRootCommand(msg *capnp.Message) (Command, error) {
	root, err := msg.RootPtr()
	return Command{root.Struct()}, err
}

func (s Command) String() string {
	str, _ := text.Marshal(0xf42c7dd7018cbb03, s.Struct)
	return str
}

func (s Command) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Command) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Command) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Command) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Command) Aliases() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Command) HasAliases() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s Command) SetAliases(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAliases sets the aliases field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Command) NewAliases(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Command) Usage() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Command) HasUsage() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s Command) UsageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Command) SetUsage(v string) error {
	return s.Struct.SetText(2, v)
}

// Command_List is a list of Command.
type Command_List struct{ capnp.List }

// NewCommand creates a new list of Command.
func NewCommand_List(s *capnp.Segment, sz int32) (Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Command_List{l}, err
}

func (s Command_List) At(i int) Command { return Command{s.List.Struct(i)} }

func (s Command_List) Set(i int, v Command) error { return s.List.SetStruct(i, v.Struct) }

func (s Command_List) String() string {
	str, _ := text.MarshalList(0xf42c7dd7018cbb03, s.List)
	return str
}

// Command_Promise is a wrapper for a Command promised by a client call.
type Command_Promise struct{ *capnp.Pipeline }

func (p Command_Promise) Struct() (Command, error) {
	s, err := p.Pipeline.Struct()
	return Command{s}, err
}

type UserRole uint16

// UserRole_TypeID is the unique identifier for the type UserRole.
const UserRole_TypeID = 0x971dd3472a97b1b5

// Values of UserRole.
const (
	UserRole_regular UserRole = 0
	UserRole_mod     UserRole = 1
	UserRole_admin   UserRole = 2
)

// String returns the enum's constant name.
func (c UserRole) String() string {
	switch c {
	case UserRole_regular:
		return "regular"
	case UserRole_mod:
		return "mod"
	case UserRole_admin:
		return "admin"

	default:
		return ""
	}
}

// UserRoleFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UserRoleFromString(c string) UserRole {
	switch c {
	case "regular":
		return UserRole_regular
	case "mod":
		return UserRole_mod
	case "admin":
		return UserRole_admin

	default:
		return 0
	}
}

type UserRole_List struct{ capnp.List }

func NewUserRole_List(s *capnp.Segment, sz int32) (UserRole_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return UserRole_List{l.List}, err
}

func (l UserRole_List) At(i int) UserRole {
	ul := capnp.UInt16List{List: l.List}
	return UserRole(ul.At(i))
}

func (l UserRole_List) Set(i int, v UserRole) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type User struct{ capnp.Struct }

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0xa1d57c8c488d1cc0

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return User{st}, err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return User{st}, err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.RootPtr()
	return User{root.Struct()}, err
}

func (s User) String() string {
	str, _ := text.Marshal(0xa1d57c8c488d1cc0, s.Struct)
	return str
}

func (s User) Nick() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s User) HasNick() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s User) NickBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetNick(v string) error {
	return s.Struct.SetText(0, v)
}

func (s User) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s User) HasId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s User) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s User) Role() UserRole {
	return UserRole(s.Struct.Uint16(0))
}

func (s User) SetRole(v UserRole) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s User) JoinedAt() (Timestamp, error) {
	p, err := s.Struct.Ptr(2)
	return Timestamp{Struct: p.Struct()}, err
}

func (s User) HasJoinedAt() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s User) SetJoinedAt(v Timestamp) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewJoinedAt sets the joinedAt field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s User) NewJoinedAt() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// User_List is a list of User.
type User_List struct{ capnp.List }

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return User_List{l}, err
}

func (s User_List) At(i int) User { return User{s.List.Struct(i)} }

func (s User_List) Set(i int, v User) error { return s.List.SetStruct(i, v.Struct) }

func (s User_List) String() string {
	str, _ := text.MarshalList(0xa1d57c8c488d1cc0, s.List)
	return str
}

// User_Promise is a wrapper for a User promised by a client call.
type User_Promise struct{ *capnp.Pipeline }

func (p User_Promise) Struct() (User, error) {
	s, err := p.Pipeline.Struct()
	return User{s}, err
}

func (p User_Promise) JoinedAt() Timestamp_Promise {
	return Timestamp_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type IncomingMessagePacket struct{ capnp.Struct }

// IncomingMessagePacket_TypeID is the unique identifier for the type IncomingMessagePacket.
const IncomingMessagePacket_TypeID = 0xb0342843020dafb0

func NewIncomingMessagePacket(s *capnp.Segment) (IncomingMessagePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return IncomingMessagePacket{st}, err
}

func NewRootIncomingMessagePacket(s *capnp.Segment) (IncomingMessagePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return IncomingMessagePacket{st}, err
}

func ReadRootIncomingMessagePacket(msg *capnp.Message) (IncomingMessagePacket, error) {
	root, err := msg.RootPtr()
	return IncomingMessagePacket{root.Struct()}, err
}

func (s IncomingMessagePacket) String() string {
	str, _ := text.Marshal(0xb0342843020dafb0, s.Struct)
	return str
}

func (s IncomingMessagePacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s IncomingMessagePacket) HasTimestamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IncomingMessagePacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s IncomingMessagePacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s IncomingMessagePacket) Message() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IncomingMessagePacket) HasMessage() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s IncomingMessagePacket) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IncomingMessagePacket) SetMessage(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IncomingMessagePacket) Sender() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s IncomingMessagePacket) HasSender() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s IncomingMessagePacket) SetSender(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated User struct, preferring placement in s's segment.
func (s IncomingMessagePacket) NewSender() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s IncomingMessagePacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s IncomingMessagePacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

func (s IncomingMessagePacket) Recipients() (User_List, error) {
	p, err := s.Struct.Ptr(3)
	return User_List{List: p.List()}, err
}

func (s IncomingMessagePacket) HasRecipients() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s IncomingMessagePacket) SetRecipients(v User_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRecipients sets the recipients field to a newly
// allocated User_List, preferring placement in s's segment.
func (s IncomingMessagePacket) NewRecipients(n int32) (User_List, error) {
	l, err := NewUser_List(s.Struct.Segment(), n)
	if err != nil {
		return User_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s IncomingMessagePacket) MentionsConnectorUser() bool {
	return s.Struct.Bit(1)
}

func (s IncomingMessagePacket) SetMentionsConnectorUser(v bool) {
	s.Struct.SetBit(1, v)
}

func (s IncomingMessagePacket) Incoming() bool {
	return s.Struct.Bit(2)
}

func (s IncomingMessagePacket) SetIncoming(v bool) {
	s.Struct.SetBit(2, v)
}

// IncomingMessagePacket_List is a list of IncomingMessagePacket.
type IncomingMessagePacket_List struct{ capnp.List }

// NewIncomingMessagePacket creates a new list of IncomingMessagePacket.
func NewIncomingMessagePacket_List(s *capnp.Segment, sz int32) (IncomingMessagePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return IncomingMessagePacket_List{l}, err
}

func (s IncomingMessagePacket_List) At(i int) IncomingMessagePacket {
	return IncomingMessagePacket{s.List.Struct(i)}
}

func (s IncomingMessagePacket_List) Set(i int, v IncomingMessagePacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IncomingMessagePacket_List) String() string {
	str, _ := text.MarshalList(0xb0342843020dafb0, s.List)
	return str
}

// IncomingMessagePacket_Promise is a wrapper for a IncomingMessagePacket promised by a client call.
type IncomingMessagePacket_Promise struct{ *capnp.Pipeline }

func (p IncomingMessagePacket_Promise) Struct() (IncomingMessagePacket, error) {
	s, err := p.Pipeline.Struct()
	return IncomingMessagePacket{s}, err
}

func (p IncomingMessagePacket_Promise) Timestamp() Timestamp_Promise {
	return Timestamp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p IncomingMessagePacket_Promise) Sender() User_Promise {
	return User_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type UserEvent uint16

// UserEvent_TypeID is the unique identifier for the type UserEvent.
const UserEvent_TypeID = 0xf145976cbe38c029

// Values of UserEvent.
const (
	UserEvent_joined UserEvent = 0
	UserEvent_left   UserEvent = 1
)

// String returns the enum's constant name.
func (c UserEvent) String() string {
	switch c {
	case UserEvent_joined:
		return "joined"
	case UserEvent_left:
		return "left"

	default:
		return ""
	}
}

// UserEventFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UserEventFromString(c string) UserEvent {
	switch c {
	case "joined":
		return UserEvent_joined
	case "left":
		return UserEvent_left

	default:
		return 0
	}
}

type UserEvent_List struct{ capnp.List }

func NewUserEvent_List(s *capnp.Segment, sz int32) (UserEvent_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return UserEvent_List{l.List}, err
}

func (l UserEvent_List) At(i int) UserEvent {
	ul := capnp.UInt16List{List: l.List}
	return UserEvent(ul.At(i))
}

func (l UserEvent_List) Set(i int, v UserEvent) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type UserPacket struct{ capnp.Struct }

// UserPacket_TypeID is the unique identifier for the type UserPacket.
const UserPacket_TypeID = 0xd6ef75d402487ecc

func NewUserPacket(s *capnp.Segment) (UserPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserPacket{st}, err
}

func NewRootUserPacket(s *capnp.Segment) (UserPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserPacket{st}, err
}

func ReadRootUserPacket(msg *capnp.Message) (UserPacket, error) {
	root, err := msg.RootPtr()
	return UserPacket{root.Struct()}, err
}

func (s UserPacket) String() string {
	str, _ := text.Marshal(0xd6ef75d402487ecc, s.Struct)
	return str
}

func (s UserPacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s UserPacket) HasTimestamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s UserPacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s UserPacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s UserPacket) Event() UserEvent {
	return UserEvent(s.Struct.Uint16(0))
}

func (s UserPacket) SetEvent(v UserEvent) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s UserPacket) User() (User, error) {
	p, err := s.Struct.Ptr(1)
	return User{Struct: p.Struct()}, err
}

func (s UserPacket) HasUser() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s UserPacket) SetUser(v User) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUser sets the user field to a newly
// allocated User struct, preferring placement in s's segment.
func (s UserPacket) NewUser() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// UserPacket_List is a list of UserPacket.
type UserPacket_List struct{ capnp.List }

// NewUserPacket creates a new list of UserPacket.
func NewUserPacket_List(s *capnp.Segment, sz int32) (UserPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return UserPacket_List{l}, err
}

func (s UserPacket_List) At(i int) UserPacket { return UserPacket{s.List.Struct(i)} }

func (s UserPacket_List) Set(i int, v UserPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s UserPacket_List) String() string {
	str, _ := text.MarshalList(0xd6ef75d402487ecc, s.List)
	return str
}

// UserPacket_Promise is a wrapper for a UserPacket promised by a client call.
type UserPacket_Promise struct{ *capnp.Pipeline }

func (p UserPacket_Promise) Struct() (UserPacket, error) {
	s, err := p.Pipeline.Struct()
	return UserPacket{s}, err
}

func (p UserPacket_Promise) Timestamp() Timestamp_Promise {
	return Timestamp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p UserPacket_Promise) User() User_Promise {
	return User_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type CommandPacket struct{ capnp.Struct }

// CommandPacket_TypeID is the unique identifier for the type CommandPacket.
const CommandPacket_TypeID = 0xd55a13aeeb1a986d

func NewCommandPacket(s *capnp.Segment) (CommandPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return CommandPacket{st}, err
}

func NewRootCommandPacket(s *capnp.Segment) (CommandPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return CommandPacket{st}, err
}

func ReadRootCommandPacket(msg *capnp.Message) (CommandPacket, error) {
	root, err := msg.RootPtr()
	return CommandPacket{root.Struct()}, err
}

func (s CommandPacket) String() string {
	str, _ := text.Marshal(0xd55a13aeeb1a986d, s.Struct)
	return str
}

func (s CommandPacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s CommandPacket) HasTimestamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CommandPacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s CommandPacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CommandPacket) Command() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CommandPacket) HasCommand() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s CommandPacket) CommandBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CommandPacket) SetCommand(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CommandPacket) Sender() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s CommandPacket) HasSender() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s CommandPacket) SetSender(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated User struct, preferring placement in s's segment.
func (s CommandPacket) NewSender() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s CommandPacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s CommandPacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

func (s CommandPacket) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s CommandPacket) HasArgs() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s CommandPacket) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CommandPacket) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s CommandPacket) ArgString() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s CommandPacket) HasArgString() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s CommandPacket) ArgStringBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s CommandPacket) SetArgString(v string) error {
	return s.Struct.SetText(4, v)
}

// CommandPacket_List is a list of CommandPacket.
type CommandPacket_List struct{ capnp.List }

// NewCommandPacket creates a new list of CommandPacket.
func NewCommandPacket_List(s *capnp.Segment, sz int32) (CommandPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return CommandPacket_List{l}, err
}

func (s CommandPacket_List) At(i int) CommandPacket { return CommandPacket{s.List.Struct(i)} }

func (s CommandPacket_List) Set(i int, v CommandPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s CommandPacket_List) String() string {
	str, _ := text.MarshalList(0xd55a13aeeb1a986d, s.List)
	return str
}

// CommandPacket_Promise is a wrapper for a CommandPacket promised by a client call.
type CommandPacket_Promise struct{ *capnp.Pipeline }

func (p CommandPacket_Promise) Struct() (CommandPacket, error) {
	s, err := p.Pipeline.Struct()
	return CommandPacket{s}, err
}

func (p CommandPacket_Promise) Timestamp() Timestamp_Promise {
	return Timestamp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p CommandPacket_Promise) Sender() User_Promise {
	return User_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type OutgoingMessagePacket struct{ capnp.Struct }

// OutgoingMessagePacket_TypeID is the unique identifier for the type OutgoingMessagePacket.
const OutgoingMessagePacket_TypeID = 0xf1a684870430173a

func NewOutgoingMessagePacket(s *capnp.Segment) (OutgoingMessagePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OutgoingMessagePacket{st}, err
}

func NewRootOutgoingMessagePacket(s *capnp.Segment) (OutgoingMessagePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OutgoingMessagePacket{st}, err
}

func ReadRootOutgoingMessagePacket(msg *capnp.Message) (OutgoingMessagePacket, error) {
	root, err := msg.RootPtr()
	return OutgoingMessagePacket{root.Struct()}, err
}

func (s OutgoingMessagePacket) String() string {
	str, _ := text.Marshal(0xf1a684870430173a, s.Struct)
	return str
}

func (s OutgoingMessagePacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s OutgoingMessagePacket) HasTimestamp() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s OutgoingMessagePacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s OutgoingMessagePacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s OutgoingMessagePacket) Message() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s OutgoingMessagePacket) HasMessage() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s OutgoingMessagePacket) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s OutgoingMessagePacket) SetMessage(v string) error {
	return s.Struct.SetText(1, v)
}

func (s OutgoingMessagePacket) Recipient() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s OutgoingMessagePacket) HasRecipient() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s OutgoingMessagePacket) SetRecipient(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewRecipient sets the recipient field to a newly
// allocated User struct, preferring placement in s's segment.
func (s OutgoingMessagePacket) NewRecipient() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s OutgoingMessagePacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s OutgoingMessagePacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

// OutgoingMessagePacket_List is a list of OutgoingMessagePacket.
type OutgoingMessagePacket_List struct{ capnp.List }

// NewOutgoingMessagePacket creates a new list of OutgoingMessagePacket.
func NewOutgoingMessagePacket_List(s *capnp.Segment, sz int32) (OutgoingMessagePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return OutgoingMessagePacket_List{l}, err
}

func (s OutgoingMessagePacket_List) At(i int) OutgoingMessagePacket {
	return OutgoingMessagePacket{s.List.Struct(i)}
}

func (s OutgoingMessagePacket_List) Set(i int, v OutgoingMessagePacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s OutgoingMessagePacket_List) String() string {
	str, _ := text.MarshalList(0xf1a684870430173a, s.List)
	return str
}

// OutgoingMessagePacket_Promise is a wrapper for a OutgoingMessagePacket promised by a client call.
type OutgoingMessagePacket_Promise struct{ *capnp.Pipeline }

func (p OutgoingMessagePacket_Promise) Struct() (OutgoingMessagePacket, error) {
	s, err := p.Pipeline.Struct()
	return OutgoingMessagePacket{s}, err
}

func (p OutgoingMessagePacket_Promise) Timestamp() Timestamp_Promise {
	return Timestamp_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p OutgoingMessagePacket_Promise) Recipient() User_Promise {
	return User_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type RegistrationPacket struct{ capnp.Struct }

// RegistrationPacket_TypeID is the unique identifier for the type RegistrationPacket.
const RegistrationPacket_TypeID = 0x93e7595095e6d2c8

func NewRegistrationPacket(s *capnp.Segment) (RegistrationPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationPacket{st}, err
}

func NewRootRegistrationPacket(s *capnp.Segment) (RegistrationPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationPacket{st}, err
}

func ReadRootRegistrationPacket(msg *capnp.Message) (RegistrationPacket, error) {
	root, err := msg.RootPtr()
	return RegistrationPacket{root.Struct()}, err
}

func (s RegistrationPacket) String() string {
	str, _ := text.Marshal(0x93e7595095e6d2c8, s.Struct)
	return str
}

func (s RegistrationPacket) Commands() (Command_List, error) {
	p, err := s.Struct.Ptr(0)
	return Command_List{List: p.List()}, err
}

func (s RegistrationPacket) HasCommands() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RegistrationPacket) SetCommands(v Command_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommands sets the commands field to a newly
// allocated Command_List, preferring placement in s's segment.
func (s RegistrationPacket) NewCommands(n int32) (Command_List, error) {
	l, err := NewCommand_List(s.Struct.Segment(), n)
	if err != nil {
		return Command_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// RegistrationPacket_List is a list of RegistrationPacket.
type RegistrationPacket_List struct{ capnp.List }

// NewRegistrationPacket creates a new list of RegistrationPacket.
func NewRegistrationPacket_List(s *capnp.Segment, sz int32) (RegistrationPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RegistrationPacket_List{l}, err
}

func (s RegistrationPacket_List) At(i int) RegistrationPacket {
	return RegistrationPacket{s.List.Struct(i)}
}

func (s RegistrationPacket_List) Set(i int, v RegistrationPacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RegistrationPacket_List) String() string {
	str, _ := text.MarshalList(0x93e7595095e6d2c8, s.List)
	return str
}

// RegistrationPacket_Promise is a wrapper for a RegistrationPacket promised by a client call.
type RegistrationPacket_Promise struct{ *capnp.Pipeline }

func (p RegistrationPacket_Promise) Struct() (RegistrationPacket, error) {
	s, err := p.Pipeline.Struct()
	return RegistrationPacket{s}, err
}

type ConfirmationPacket struct{ capnp.Struct }

// ConfirmationPacket_TypeID is the unique identifier for the type ConfirmationPacket.
const ConfirmationPacket_TypeID = 0x89b5686804357bc6

func NewConfirmationPacket(s *capnp.Segment) (ConfirmationPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConfirmationPacket{st}, err
}

func NewRootConfirmationPacket(s *capnp.Segment) (ConfirmationPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConfirmationPacket{st}, err
}

func ReadRootConfirmationPacket(msg *capnp.Message) (ConfirmationPacket, error) {
	root, err := msg.RootPtr()
	return ConfirmationPacket{root.Struct()}, err
}

func (s ConfirmationPacket) String() string {
	str, _ := text.Marshal(0x89b5686804357bc6, s.Struct)
	return str
}

func (s ConfirmationPacket) BotUser() (User, error) {
	p, err := s.Struct.Ptr(0)
	return User{Struct: p.Struct()}, err
}

func (s ConfirmationPacket) HasBotUser() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ConfirmationPacket) SetBotUser(v User) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBotUser sets the botUser field to a newly
// allocated User struct, preferring placement in s's segment.
func (s ConfirmationPacket) NewBotUser() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ConfirmationPacket) Trigger() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfirmationPacket) HasTrigger() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ConfirmationPacket) TriggerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfirmationPacket) SetTrigger(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ConfirmationPacket) Users() (User_List, error) {
	p, err := s.Struct.Ptr(2)
	return User_List{List: p.List()}, err
}

func (s ConfirmationPacket) HasUsers() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ConfirmationPacket) SetUsers(v User_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated User_List, preferring placement in s's segment.
func (s ConfirmationPacket) NewUsers(n int32) (User_List, error) {
	l, err := NewUser_List(s.Struct.Segment(), n)
	if err != nil {
		return User_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// ConfirmationPacket_List is a list of ConfirmationPacket.
type ConfirmationPacket_List struct{ capnp.List }

// NewConfirmationPacket creates a new list of ConfirmationPacket.
func NewConfirmationPacket_List(s *capnp.Segment, sz int32) (ConfirmationPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ConfirmationPacket_List{l}, err
}

func (s ConfirmationPacket_List) At(i int) ConfirmationPacket {
	return ConfirmationPacket{s.List.Struct(i)}
}

func (s ConfirmationPacket_List) Set(i int, v ConfirmationPacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConfirmationPacket_List) String() string {
	str, _ := text.MarshalList(0x89b5686804357bc6, s.List)
	return str
}

// ConfirmationPacket_Promise is a wrapper for a ConfirmationPacket promised by a client call.
type ConfirmationPacket_Promise struct{ *capnp.Pipeline }

func (p ConfirmationPacket_Promise) Struct() (ConfirmationPacket, error) {
	s, err := p.Pipeline.Struct()
	return ConfirmationPacket{s}, err
}

func (p ConfirmationPacket_Promise) BotUser() User_Promise {
	return User_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_824b0dcb3e553a2a = "x\xda\x94U]h\x1cU\x18\xfd\xce\xbd\xbb\xd9\x14\xb2" +
	"\xdd\x0c\xb3b\x09-\x0b>\xd5P\xa46\x8a\x92\x07S" +
	"\x1b\x8b\xad\xb64wm\xb1\x16\x85\x8e\xbb\xb7\xdbiw" +
	"f\x96\x99\xd9\xa2\xd8\x1a\x10E\x02-\xa2R\xda\x80\x05" +
	"\x03U\xaa\x986)Fl5\x92\x88J\xc4\x8a\xbfQ" +
	"\xea\x9bP\xec\x83\x8a\x16|\xd0\x07\x19\xb9\xb3?3\x99" +
	",\xad}\xbb\xdc=\xfb\xdd\xf3\x9ds\xbeo\xd6\x7f\xcd" +
	"6\xb2;\xd3_q\"\xb1.\xdd\x15|\xf6\xcc\xdd\xa9" +
	"\xfd\xfbg\xc6H\xcb\"\xe8\x1f\xdcu\xdf\x17\xd9\x87\x9f" +
	"\xa34\xcf\x10\x0d|\x09\x06\xfd22D\xfa\"\xce\x11" +
	"\x82\x85o\x7f9>\xf2\xd8\xd5W\x13`\x85\x188\xc2" +
	"\x18\xf41\xa6\xc0/\xb0!B03}\xa2\xff\xc1\xef" +
	"\xd6\x9c -\xcb\"0A\xbf\xc0\xce\xeb\xf3!p\x96" +
	"\xed \x04s\xab\x8fm9zxq\x82D\x16I\x0e" +
	"\xfa7\xec\x15\xfdr\x08^dW\x09\xc1\xd4\xb9,\x1b" +
	"^{\xd7T\x12\x9cR\x1c&y\x1f\xf4\xd9\x90\xfb\x05" +
	"\xfe\x12\x08A\xdf{\xa9\xb1Sg\x9f\x9eN\xc0\x15Z" +
	"\x97\xe9\x8b\xba\x95V'3\xad\x08['\xfb~=\xab" +
	"\xefYL\x96\x0e!\xc7\xd2?\xe9\xe3\xea4p<\xfd" +
	"\xa8\xaa|\xe9\xd9-\xec\xfb\xfa\x1f?$\xd1!\xd7\x7f" +
	"\xba>\xd6\x91Q\xa7\x7f\xbb\x94p\xb7\xcf\xdd\xfbQ\xf5" +
	"\xc4\xe6k\xcb\xb4\x18\xcf\\\xd4'B\xe0\xa9\xcc=\x84" +
	"`\xf0\xd6\xf5\xa9\x17\x9f\x7f\xf3Z'-\x06&2}" +
	"\xd0\xa7C\xf4dF\x89\xc1?8\x8a\x1f\x8f\xac\xfb\xab" +
	"\x83y\xfaX\xf7\xdb\xfa\xcb\xdd!\xf5nE\xa1f\x94" +
	"\x0eJ\xff\x8e\x127jvmp\xd8\xb1\xf7\x99\xaee" +
	"\xf8\xa6c\x8f\x84\xbf\xd0\x08 zx\x8a(\x05\"m" +
	"\xf3&\"\xb1\x91Clc\xd0\x80<\xd4\xe5Vu\xf9" +
	"\x00\x87\x18a\xd0\x18\xcb\x83\x11i\xdb7\x10\x89-\x1c" +
	"\xa2\xcc0\xfa\xa4\xe3\xef\xf2\xa4\x8b\xde\xc8U\x02z\x09" +
	"\xa3\xbekV*\xd2E\x0f1\xf4\x10\x0auO\xba\x1e" +
	"V\x12F8\x12\xf0\x95\xcb\xe8\x16e\xc5\xf4|7I" +
	"7\xd5\xa6\x9b}\x88H\xf4p\x88\xb5\x0cA\xc9\xb1," +
	"\xc3.{D\x14=\xd0\xd6*\xf1\x00\xc2\x07vy\xb2" +
	"\xe0\x16\x9d\xaa\x0cU\x08\xfbZ\xb3IA\xb5[n#" +
	"\x02\xd3\xb2\x1b\x88F]Y\xa9W\x0d7c9\xe5\x82" +
	"Q\xb6L{y\x15\xb8\xaaBo\x9b\x98\xd1O$\x1e" +
	"\xe7\x10\xfbc:\xca>\"\xb1\x97CT\x19\xd0\x94\xd1" +
	"T\xc02\x87\xa81h\x9c\xe5\xc1\x894K\xb5U\xe5" +
	"\x10O1\xe4l\xb3t\xb0%\x1f7\xcb\xadc\xceu" +
	"\xaa\x12\xb9h\xde\x08\xc8\x11\x82\x03\x8ei\xcb\xf2\xfd\xbe" +
	"R\xa17\x1a\x84\x86\x1d\x09}\xb7\xda%\xc72\xed\xca" +
	"v\xe9yFE*\x89\xb9\xf4U'\xab\xdb\x9d\xcc\x14" +
	"\x89\xc4\xbb\x1cb.\xd6\xc9\xacJ\xc4\xfb\x1c\xe2\x93X" +
	"\"\xe6\x07\x89\xc4\x87\x1cb\x81\x01\xbc\xd1\xc9\xa7\x0a8" +
	"\xc7!.1h)\x9eG\x8aH\xfb|\x0f\x91X\xe0" +
	"\x10W\x18\xb44\xf2H\x13i?\x9f'\x12W8\xc4" +
	"\x9f\x0cZ\x17\xcb\xa3\x8bH\xfb]\x09\xf1\x1b\x87\xf8\x9b" +
	"!\xf0MKz\xbea\x11j\xcb;\x1b\xb5\x1a=\xb4" +
	"\xe4\x19\xf2\xa4]\xee\x98\xc8\x9ak\x1e2|\x09\x10\x83" +
	"\x9ahW\x96\xcc\x9a)m\xe2\xfeu\x82iI[\xa5" +
	"\xd0\xc3\xb0c\xdb\xb2\xe4;\x057L|\xab\x8a\xd9\x94" +
	"R\xc9\xde\xba[\x9a\x92\x9d\xa65\x14\xf2\xaf%2|" +
	"\xa0\x99\xe1U\x0c\x81eV\xab\xa6'K\x94s\xec\xb2" +
	"\x87\x15\xc4\xb0\"V\x895\xa78\x0cz\xcc\xaeU\xed" +
	"j\xe3\xca\xae\x93\x1c\xe2t\xcc\xae\x09\xe5\xc2k\x1c\xe2" +
	"L\xcc\xae7\x94]\xafs\x88w\"\xbb\xdeR\xc0\xd3" +
	"\x1cb*f\xd7\xa4\x8a\xe8\x99\xa6\xd9\xe9T\xc3\xae\xf9" +
	"bd\xec\x0d\x9ci\xce\xe5M;\x933\xdcJ\xdb\x11" +
	"\xf5g\xe5\x83\xe1V\x1e\xf1]\xd3&TZ\x05\x13\xea" +
	"([:\xef\xb6b\xb4\xc6Z\xca\xb4\xb7\xd8N\xa5\x0c" +
	"\x1a\xca\x08\xd5\xf06\x0e\xb1\xfbF\xbd\x15\xe4!i\xfb" +
	"\xc8E\x9b\xbe1\x85\xb9z\xc7m\xb8|o\x0c\xb9\x9b" +
	"U\x05E\xb4;|[\x1b\x0c\xd7\xcf\x8a~\xa2\xa1\xc6" +
	"(\xe7\xaar\x9f\x9f\x18\xdc\x1du\xbf\xe2t\x1c\xdc\xd8" +
	"\x0a*F\xdb\xa6\x9d\x04sSl\xdd\xb4\x92`\x15\xa3" +
	"u\xd3JB]\x01k\x1c\xe2\xf0\xcdN^4P\xf0" +
	"\xff\xc7\xf8-\x95d\xd8\xb1ra\xb6\x97:\xd7\x7f\xbd" +
	"\xaf\xd2\xdeX+O(?w7\xbeJ9\xdb\xb0\xda" +
	"\xacF\x8d\xaaix2\x99\xa7B=N\xfd\xbf\x00\x00" +
	"\x00\xff\xff<\x0a-\xda"

func init() {
	schemas.Register(schema_824b0dcb3e553a2a,
		0x89b5686804357bc6,
		0x93e7595095e6d2c8,
		0x971dd3472a97b1b5,
		0xa1d57c8c488d1cc0,
		0xb0342843020dafb0,
		0xb179ae9d8904b61a,
		0xd55a13aeeb1a986d,
		0xd6ef75d402487ecc,
		0xf145976cbe38c029,
		0xf1a684870430173a,
		0xf42c7dd7018cbb03)
}
