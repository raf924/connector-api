// Code generated by capnpc-go. DO NOT EDIT.

package connector

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Timestamp struct{ capnp.Struct }

// Timestamp_TypeID is the unique identifier for the type Timestamp.
const Timestamp_TypeID = 0xb179ae9d8904b61a

func NewTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Timestamp{st}, err
}

func NewRootTimestamp(s *capnp.Segment) (Timestamp, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return Timestamp{st}, err
}

func ReadRootTimestamp(msg *capnp.Message) (Timestamp, error) {
	root, err := msg.Root()
	return Timestamp{root.Struct()}, err
}

func (s Timestamp) String() string {
	str, _ := text.Marshal(0xb179ae9d8904b61a, s.Struct)
	return str
}

func (s Timestamp) Milliseconds() uint64 {
	return s.Struct.Uint64(0)
}

func (s Timestamp) SetMilliseconds(v uint64) {
	s.Struct.SetUint64(0, v)
}

// Timestamp_List is a list of Timestamp.
type Timestamp_List struct{ capnp.List }

// NewTimestamp creates a new list of Timestamp.
func NewTimestamp_List(s *capnp.Segment, sz int32) (Timestamp_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return Timestamp_List{l}, err
}

func (s Timestamp_List) At(i int) Timestamp { return Timestamp{s.List.Struct(i)} }

func (s Timestamp_List) Set(i int, v Timestamp) error { return s.List.SetStruct(i, v.Struct) }

func (s Timestamp_List) String() string {
	str, _ := text.MarshalList(0xb179ae9d8904b61a, s.List)
	return str
}

// Timestamp_Future is a wrapper for a Timestamp promised by a client call.
type Timestamp_Future struct{ *capnp.Future }

func (p Timestamp_Future) Struct() (Timestamp, error) {
	s, err := p.Future.Struct()
	return Timestamp{s}, err
}

type Command struct{ capnp.Struct }

// Command_TypeID is the unique identifier for the type Command.
const Command_TypeID = 0xf42c7dd7018cbb03

func NewCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Command{st}, err
}

func NewRootCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Command{st}, err
}

func ReadRootCommand(msg *capnp.Message) (Command, error) {
	root, err := msg.Root()
	return Command{root.Struct()}, err
}

func (s Command) String() string {
	str, _ := text.Marshal(0xf42c7dd7018cbb03, s.Struct)
	return str
}

func (s Command) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Command) HasName() bool {
	return s.Struct.HasPtr(0)
}

func (s Command) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Command) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s Command) Aliases() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s Command) HasAliases() bool {
	return s.Struct.HasPtr(1)
}

func (s Command) SetAliases(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAliases sets the aliases field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Command) NewAliases(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s Command) Usage() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s Command) HasUsage() bool {
	return s.Struct.HasPtr(2)
}

func (s Command) UsageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s Command) SetUsage(v string) error {
	return s.Struct.SetText(2, v)
}

// Command_List is a list of Command.
type Command_List struct{ capnp.List }

// NewCommand creates a new list of Command.
func NewCommand_List(s *capnp.Segment, sz int32) (Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return Command_List{l}, err
}

func (s Command_List) At(i int) Command { return Command{s.List.Struct(i)} }

func (s Command_List) Set(i int, v Command) error { return s.List.SetStruct(i, v.Struct) }

func (s Command_List) String() string {
	str, _ := text.MarshalList(0xf42c7dd7018cbb03, s.List)
	return str
}

// Command_Future is a wrapper for a Command promised by a client call.
type Command_Future struct{ *capnp.Future }

func (p Command_Future) Struct() (Command, error) {
	s, err := p.Future.Struct()
	return Command{s}, err
}

type UserRole uint16

// UserRole_TypeID is the unique identifier for the type UserRole.
const UserRole_TypeID = 0x971dd3472a97b1b5

// Values of UserRole.
const (
	UserRole_regular UserRole = 0
	UserRole_mod     UserRole = 1
	UserRole_admin   UserRole = 2
)

// String returns the enum's constant name.
func (c UserRole) String() string {
	switch c {
	case UserRole_regular:
		return "regular"
	case UserRole_mod:
		return "mod"
	case UserRole_admin:
		return "admin"

	default:
		return ""
	}
}

// UserRoleFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UserRoleFromString(c string) UserRole {
	switch c {
	case "regular":
		return UserRole_regular
	case "mod":
		return UserRole_mod
	case "admin":
		return UserRole_admin

	default:
		return 0
	}
}

type UserRole_List struct{ capnp.List }

func NewUserRole_List(s *capnp.Segment, sz int32) (UserRole_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return UserRole_List{l.List}, err
}

func (l UserRole_List) At(i int) UserRole {
	ul := capnp.UInt16List{List: l.List}
	return UserRole(ul.At(i))
}

func (l UserRole_List) Set(i int, v UserRole) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type User struct{ capnp.Struct }

// User_TypeID is the unique identifier for the type User.
const User_TypeID = 0xa1d57c8c488d1cc0

func NewUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return User{st}, err
}

func NewRootUser(s *capnp.Segment) (User, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return User{st}, err
}

func ReadRootUser(msg *capnp.Message) (User, error) {
	root, err := msg.Root()
	return User{root.Struct()}, err
}

func (s User) String() string {
	str, _ := text.Marshal(0xa1d57c8c488d1cc0, s.Struct)
	return str
}

func (s User) Nick() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s User) HasNick() bool {
	return s.Struct.HasPtr(0)
}

func (s User) NickBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s User) SetNick(v string) error {
	return s.Struct.SetText(0, v)
}

func (s User) Id() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s User) HasId() bool {
	return s.Struct.HasPtr(1)
}

func (s User) IdBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s User) SetId(v string) error {
	return s.Struct.SetText(1, v)
}

func (s User) Role() UserRole {
	return UserRole(s.Struct.Uint16(0))
}

func (s User) SetRole(v UserRole) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s User) JoinedAt() (Timestamp, error) {
	p, err := s.Struct.Ptr(2)
	return Timestamp{Struct: p.Struct()}, err
}

func (s User) HasJoinedAt() bool {
	return s.Struct.HasPtr(2)
}

func (s User) SetJoinedAt(v Timestamp) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewJoinedAt sets the joinedAt field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s User) NewJoinedAt() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// User_List is a list of User.
type User_List struct{ capnp.List }

// NewUser creates a new list of User.
func NewUser_List(s *capnp.Segment, sz int32) (User_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return User_List{l}, err
}

func (s User_List) At(i int) User { return User{s.List.Struct(i)} }

func (s User_List) Set(i int, v User) error { return s.List.SetStruct(i, v.Struct) }

func (s User_List) String() string {
	str, _ := text.MarshalList(0xa1d57c8c488d1cc0, s.List)
	return str
}

// User_Future is a wrapper for a User promised by a client call.
type User_Future struct{ *capnp.Future }

func (p User_Future) Struct() (User, error) {
	s, err := p.Future.Struct()
	return User{s}, err
}

func (p User_Future) JoinedAt() Timestamp_Future {
	return Timestamp_Future{Future: p.Future.Field(2, nil)}
}

type IncomingMessagePacket struct{ capnp.Struct }

// IncomingMessagePacket_TypeID is the unique identifier for the type IncomingMessagePacket.
const IncomingMessagePacket_TypeID = 0xb0342843020dafb0

func NewIncomingMessagePacket(s *capnp.Segment) (IncomingMessagePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return IncomingMessagePacket{st}, err
}

func NewRootIncomingMessagePacket(s *capnp.Segment) (IncomingMessagePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return IncomingMessagePacket{st}, err
}

func ReadRootIncomingMessagePacket(msg *capnp.Message) (IncomingMessagePacket, error) {
	root, err := msg.Root()
	return IncomingMessagePacket{root.Struct()}, err
}

func (s IncomingMessagePacket) String() string {
	str, _ := text.Marshal(0xb0342843020dafb0, s.Struct)
	return str
}

func (s IncomingMessagePacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s IncomingMessagePacket) HasTimestamp() bool {
	return s.Struct.HasPtr(0)
}

func (s IncomingMessagePacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s IncomingMessagePacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s IncomingMessagePacket) Message() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s IncomingMessagePacket) HasMessage() bool {
	return s.Struct.HasPtr(1)
}

func (s IncomingMessagePacket) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s IncomingMessagePacket) SetMessage(v string) error {
	return s.Struct.SetText(1, v)
}

func (s IncomingMessagePacket) Sender() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s IncomingMessagePacket) HasSender() bool {
	return s.Struct.HasPtr(2)
}

func (s IncomingMessagePacket) SetSender(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated User struct, preferring placement in s's segment.
func (s IncomingMessagePacket) NewSender() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s IncomingMessagePacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s IncomingMessagePacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

func (s IncomingMessagePacket) Recipients() (User_List, error) {
	p, err := s.Struct.Ptr(3)
	return User_List{List: p.List()}, err
}

func (s IncomingMessagePacket) HasRecipients() bool {
	return s.Struct.HasPtr(3)
}

func (s IncomingMessagePacket) SetRecipients(v User_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewRecipients sets the recipients field to a newly
// allocated User_List, preferring placement in s's segment.
func (s IncomingMessagePacket) NewRecipients(n int32) (User_List, error) {
	l, err := NewUser_List(s.Struct.Segment(), n)
	if err != nil {
		return User_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s IncomingMessagePacket) MentionsConnectorUser() bool {
	return s.Struct.Bit(1)
}

func (s IncomingMessagePacket) SetMentionsConnectorUser(v bool) {
	s.Struct.SetBit(1, v)
}

func (s IncomingMessagePacket) Incoming() bool {
	return s.Struct.Bit(2)
}

func (s IncomingMessagePacket) SetIncoming(v bool) {
	s.Struct.SetBit(2, v)
}

// IncomingMessagePacket_List is a list of IncomingMessagePacket.
type IncomingMessagePacket_List struct{ capnp.List }

// NewIncomingMessagePacket creates a new list of IncomingMessagePacket.
func NewIncomingMessagePacket_List(s *capnp.Segment, sz int32) (IncomingMessagePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return IncomingMessagePacket_List{l}, err
}

func (s IncomingMessagePacket_List) At(i int) IncomingMessagePacket {
	return IncomingMessagePacket{s.List.Struct(i)}
}

func (s IncomingMessagePacket_List) Set(i int, v IncomingMessagePacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IncomingMessagePacket_List) String() string {
	str, _ := text.MarshalList(0xb0342843020dafb0, s.List)
	return str
}

// IncomingMessagePacket_Future is a wrapper for a IncomingMessagePacket promised by a client call.
type IncomingMessagePacket_Future struct{ *capnp.Future }

func (p IncomingMessagePacket_Future) Struct() (IncomingMessagePacket, error) {
	s, err := p.Future.Struct()
	return IncomingMessagePacket{s}, err
}

func (p IncomingMessagePacket_Future) Timestamp() Timestamp_Future {
	return Timestamp_Future{Future: p.Future.Field(0, nil)}
}

func (p IncomingMessagePacket_Future) Sender() User_Future {
	return User_Future{Future: p.Future.Field(2, nil)}
}

type UserEvent uint16

// UserEvent_TypeID is the unique identifier for the type UserEvent.
const UserEvent_TypeID = 0xf145976cbe38c029

// Values of UserEvent.
const (
	UserEvent_joined UserEvent = 0
	UserEvent_left   UserEvent = 1
)

// String returns the enum's constant name.
func (c UserEvent) String() string {
	switch c {
	case UserEvent_joined:
		return "joined"
	case UserEvent_left:
		return "left"

	default:
		return ""
	}
}

// UserEventFromString returns the enum value with a name,
// or the zero value if there's no such value.
func UserEventFromString(c string) UserEvent {
	switch c {
	case "joined":
		return UserEvent_joined
	case "left":
		return UserEvent_left

	default:
		return 0
	}
}

type UserEvent_List struct{ capnp.List }

func NewUserEvent_List(s *capnp.Segment, sz int32) (UserEvent_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return UserEvent_List{l.List}, err
}

func (l UserEvent_List) At(i int) UserEvent {
	ul := capnp.UInt16List{List: l.List}
	return UserEvent(ul.At(i))
}

func (l UserEvent_List) Set(i int, v UserEvent) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type UserPacket struct{ capnp.Struct }

// UserPacket_TypeID is the unique identifier for the type UserPacket.
const UserPacket_TypeID = 0xd6ef75d402487ecc

func NewUserPacket(s *capnp.Segment) (UserPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserPacket{st}, err
}

func NewRootUserPacket(s *capnp.Segment) (UserPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return UserPacket{st}, err
}

func ReadRootUserPacket(msg *capnp.Message) (UserPacket, error) {
	root, err := msg.Root()
	return UserPacket{root.Struct()}, err
}

func (s UserPacket) String() string {
	str, _ := text.Marshal(0xd6ef75d402487ecc, s.Struct)
	return str
}

func (s UserPacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s UserPacket) HasTimestamp() bool {
	return s.Struct.HasPtr(0)
}

func (s UserPacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s UserPacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s UserPacket) Event() UserEvent {
	return UserEvent(s.Struct.Uint16(0))
}

func (s UserPacket) SetEvent(v UserEvent) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s UserPacket) User() (User, error) {
	p, err := s.Struct.Ptr(1)
	return User{Struct: p.Struct()}, err
}

func (s UserPacket) HasUser() bool {
	return s.Struct.HasPtr(1)
}

func (s UserPacket) SetUser(v User) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewUser sets the user field to a newly
// allocated User struct, preferring placement in s's segment.
func (s UserPacket) NewUser() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// UserPacket_List is a list of UserPacket.
type UserPacket_List struct{ capnp.List }

// NewUserPacket creates a new list of UserPacket.
func NewUserPacket_List(s *capnp.Segment, sz int32) (UserPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return UserPacket_List{l}, err
}

func (s UserPacket_List) At(i int) UserPacket { return UserPacket{s.List.Struct(i)} }

func (s UserPacket_List) Set(i int, v UserPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s UserPacket_List) String() string {
	str, _ := text.MarshalList(0xd6ef75d402487ecc, s.List)
	return str
}

// UserPacket_Future is a wrapper for a UserPacket promised by a client call.
type UserPacket_Future struct{ *capnp.Future }

func (p UserPacket_Future) Struct() (UserPacket, error) {
	s, err := p.Future.Struct()
	return UserPacket{s}, err
}

func (p UserPacket_Future) Timestamp() Timestamp_Future {
	return Timestamp_Future{Future: p.Future.Field(0, nil)}
}

func (p UserPacket_Future) User() User_Future {
	return User_Future{Future: p.Future.Field(1, nil)}
}

type CommandPacket struct{ capnp.Struct }

// CommandPacket_TypeID is the unique identifier for the type CommandPacket.
const CommandPacket_TypeID = 0xd55a13aeeb1a986d

func NewCommandPacket(s *capnp.Segment) (CommandPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return CommandPacket{st}, err
}

func NewRootCommandPacket(s *capnp.Segment) (CommandPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return CommandPacket{st}, err
}

func ReadRootCommandPacket(msg *capnp.Message) (CommandPacket, error) {
	root, err := msg.Root()
	return CommandPacket{root.Struct()}, err
}

func (s CommandPacket) String() string {
	str, _ := text.Marshal(0xd55a13aeeb1a986d, s.Struct)
	return str
}

func (s CommandPacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s CommandPacket) HasTimestamp() bool {
	return s.Struct.HasPtr(0)
}

func (s CommandPacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s CommandPacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s CommandPacket) Command() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s CommandPacket) HasCommand() bool {
	return s.Struct.HasPtr(1)
}

func (s CommandPacket) CommandBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s CommandPacket) SetCommand(v string) error {
	return s.Struct.SetText(1, v)
}

func (s CommandPacket) Sender() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s CommandPacket) HasSender() bool {
	return s.Struct.HasPtr(2)
}

func (s CommandPacket) SetSender(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewSender sets the sender field to a newly
// allocated User struct, preferring placement in s's segment.
func (s CommandPacket) NewSender() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s CommandPacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s CommandPacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

func (s CommandPacket) Args() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s CommandPacket) HasArgs() bool {
	return s.Struct.HasPtr(3)
}

func (s CommandPacket) SetArgs(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewArgs sets the args field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s CommandPacket) NewArgs(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s CommandPacket) ArgString() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s CommandPacket) HasArgString() bool {
	return s.Struct.HasPtr(4)
}

func (s CommandPacket) ArgStringBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s CommandPacket) SetArgString(v string) error {
	return s.Struct.SetText(4, v)
}

// CommandPacket_List is a list of CommandPacket.
type CommandPacket_List struct{ capnp.List }

// NewCommandPacket creates a new list of CommandPacket.
func NewCommandPacket_List(s *capnp.Segment, sz int32) (CommandPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return CommandPacket_List{l}, err
}

func (s CommandPacket_List) At(i int) CommandPacket { return CommandPacket{s.List.Struct(i)} }

func (s CommandPacket_List) Set(i int, v CommandPacket) error { return s.List.SetStruct(i, v.Struct) }

func (s CommandPacket_List) String() string {
	str, _ := text.MarshalList(0xd55a13aeeb1a986d, s.List)
	return str
}

// CommandPacket_Future is a wrapper for a CommandPacket promised by a client call.
type CommandPacket_Future struct{ *capnp.Future }

func (p CommandPacket_Future) Struct() (CommandPacket, error) {
	s, err := p.Future.Struct()
	return CommandPacket{s}, err
}

func (p CommandPacket_Future) Timestamp() Timestamp_Future {
	return Timestamp_Future{Future: p.Future.Field(0, nil)}
}

func (p CommandPacket_Future) Sender() User_Future {
	return User_Future{Future: p.Future.Field(2, nil)}
}

type OutgoingMessagePacket struct{ capnp.Struct }

// OutgoingMessagePacket_TypeID is the unique identifier for the type OutgoingMessagePacket.
const OutgoingMessagePacket_TypeID = 0xf1a684870430173a

func NewOutgoingMessagePacket(s *capnp.Segment) (OutgoingMessagePacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OutgoingMessagePacket{st}, err
}

func NewRootOutgoingMessagePacket(s *capnp.Segment) (OutgoingMessagePacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return OutgoingMessagePacket{st}, err
}

func ReadRootOutgoingMessagePacket(msg *capnp.Message) (OutgoingMessagePacket, error) {
	root, err := msg.Root()
	return OutgoingMessagePacket{root.Struct()}, err
}

func (s OutgoingMessagePacket) String() string {
	str, _ := text.Marshal(0xf1a684870430173a, s.Struct)
	return str
}

func (s OutgoingMessagePacket) Timestamp() (Timestamp, error) {
	p, err := s.Struct.Ptr(0)
	return Timestamp{Struct: p.Struct()}, err
}

func (s OutgoingMessagePacket) HasTimestamp() bool {
	return s.Struct.HasPtr(0)
}

func (s OutgoingMessagePacket) SetTimestamp(v Timestamp) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewTimestamp sets the timestamp field to a newly
// allocated Timestamp struct, preferring placement in s's segment.
func (s OutgoingMessagePacket) NewTimestamp() (Timestamp, error) {
	ss, err := NewTimestamp(s.Struct.Segment())
	if err != nil {
		return Timestamp{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s OutgoingMessagePacket) Message() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s OutgoingMessagePacket) HasMessage() bool {
	return s.Struct.HasPtr(1)
}

func (s OutgoingMessagePacket) MessageBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s OutgoingMessagePacket) SetMessage(v string) error {
	return s.Struct.SetText(1, v)
}

func (s OutgoingMessagePacket) Recipient() (User, error) {
	p, err := s.Struct.Ptr(2)
	return User{Struct: p.Struct()}, err
}

func (s OutgoingMessagePacket) HasRecipient() bool {
	return s.Struct.HasPtr(2)
}

func (s OutgoingMessagePacket) SetRecipient(v User) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewRecipient sets the recipient field to a newly
// allocated User struct, preferring placement in s's segment.
func (s OutgoingMessagePacket) NewRecipient() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

func (s OutgoingMessagePacket) Private() bool {
	return s.Struct.Bit(0)
}

func (s OutgoingMessagePacket) SetPrivate(v bool) {
	s.Struct.SetBit(0, v)
}

// OutgoingMessagePacket_List is a list of OutgoingMessagePacket.
type OutgoingMessagePacket_List struct{ capnp.List }

// NewOutgoingMessagePacket creates a new list of OutgoingMessagePacket.
func NewOutgoingMessagePacket_List(s *capnp.Segment, sz int32) (OutgoingMessagePacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return OutgoingMessagePacket_List{l}, err
}

func (s OutgoingMessagePacket_List) At(i int) OutgoingMessagePacket {
	return OutgoingMessagePacket{s.List.Struct(i)}
}

func (s OutgoingMessagePacket_List) Set(i int, v OutgoingMessagePacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s OutgoingMessagePacket_List) String() string {
	str, _ := text.MarshalList(0xf1a684870430173a, s.List)
	return str
}

// OutgoingMessagePacket_Future is a wrapper for a OutgoingMessagePacket promised by a client call.
type OutgoingMessagePacket_Future struct{ *capnp.Future }

func (p OutgoingMessagePacket_Future) Struct() (OutgoingMessagePacket, error) {
	s, err := p.Future.Struct()
	return OutgoingMessagePacket{s}, err
}

func (p OutgoingMessagePacket_Future) Timestamp() Timestamp_Future {
	return Timestamp_Future{Future: p.Future.Field(0, nil)}
}

func (p OutgoingMessagePacket_Future) Recipient() User_Future {
	return User_Future{Future: p.Future.Field(2, nil)}
}

type RegistrationPacket struct{ capnp.Struct }

// RegistrationPacket_TypeID is the unique identifier for the type RegistrationPacket.
const RegistrationPacket_TypeID = 0x93e7595095e6d2c8

func NewRegistrationPacket(s *capnp.Segment) (RegistrationPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationPacket{st}, err
}

func NewRootRegistrationPacket(s *capnp.Segment) (RegistrationPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RegistrationPacket{st}, err
}

func ReadRootRegistrationPacket(msg *capnp.Message) (RegistrationPacket, error) {
	root, err := msg.Root()
	return RegistrationPacket{root.Struct()}, err
}

func (s RegistrationPacket) String() string {
	str, _ := text.Marshal(0x93e7595095e6d2c8, s.Struct)
	return str
}

func (s RegistrationPacket) Commands() (Command_List, error) {
	p, err := s.Struct.Ptr(0)
	return Command_List{List: p.List()}, err
}

func (s RegistrationPacket) HasCommands() bool {
	return s.Struct.HasPtr(0)
}

func (s RegistrationPacket) SetCommands(v Command_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewCommands sets the commands field to a newly
// allocated Command_List, preferring placement in s's segment.
func (s RegistrationPacket) NewCommands(n int32) (Command_List, error) {
	l, err := NewCommand_List(s.Struct.Segment(), n)
	if err != nil {
		return Command_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// RegistrationPacket_List is a list of RegistrationPacket.
type RegistrationPacket_List struct{ capnp.List }

// NewRegistrationPacket creates a new list of RegistrationPacket.
func NewRegistrationPacket_List(s *capnp.Segment, sz int32) (RegistrationPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RegistrationPacket_List{l}, err
}

func (s RegistrationPacket_List) At(i int) RegistrationPacket {
	return RegistrationPacket{s.List.Struct(i)}
}

func (s RegistrationPacket_List) Set(i int, v RegistrationPacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RegistrationPacket_List) String() string {
	str, _ := text.MarshalList(0x93e7595095e6d2c8, s.List)
	return str
}

// RegistrationPacket_Future is a wrapper for a RegistrationPacket promised by a client call.
type RegistrationPacket_Future struct{ *capnp.Future }

func (p RegistrationPacket_Future) Struct() (RegistrationPacket, error) {
	s, err := p.Future.Struct()
	return RegistrationPacket{s}, err
}

type ConfirmationPacket struct{ capnp.Struct }

// ConfirmationPacket_TypeID is the unique identifier for the type ConfirmationPacket.
const ConfirmationPacket_TypeID = 0x89b5686804357bc6

func NewConfirmationPacket(s *capnp.Segment) (ConfirmationPacket, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConfirmationPacket{st}, err
}

func NewRootConfirmationPacket(s *capnp.Segment) (ConfirmationPacket, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ConfirmationPacket{st}, err
}

func ReadRootConfirmationPacket(msg *capnp.Message) (ConfirmationPacket, error) {
	root, err := msg.Root()
	return ConfirmationPacket{root.Struct()}, err
}

func (s ConfirmationPacket) String() string {
	str, _ := text.Marshal(0x89b5686804357bc6, s.Struct)
	return str
}

func (s ConfirmationPacket) BotUser() (User, error) {
	p, err := s.Struct.Ptr(0)
	return User{Struct: p.Struct()}, err
}

func (s ConfirmationPacket) HasBotUser() bool {
	return s.Struct.HasPtr(0)
}

func (s ConfirmationPacket) SetBotUser(v User) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBotUser sets the botUser field to a newly
// allocated User struct, preferring placement in s's segment.
func (s ConfirmationPacket) NewBotUser() (User, error) {
	ss, err := NewUser(s.Struct.Segment())
	if err != nil {
		return User{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s ConfirmationPacket) Trigger() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ConfirmationPacket) HasTrigger() bool {
	return s.Struct.HasPtr(1)
}

func (s ConfirmationPacket) TriggerBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ConfirmationPacket) SetTrigger(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ConfirmationPacket) Users() (User_List, error) {
	p, err := s.Struct.Ptr(2)
	return User_List{List: p.List()}, err
}

func (s ConfirmationPacket) HasUsers() bool {
	return s.Struct.HasPtr(2)
}

func (s ConfirmationPacket) SetUsers(v User_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewUsers sets the users field to a newly
// allocated User_List, preferring placement in s's segment.
func (s ConfirmationPacket) NewUsers(n int32) (User_List, error) {
	l, err := NewUser_List(s.Struct.Segment(), n)
	if err != nil {
		return User_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// ConfirmationPacket_List is a list of ConfirmationPacket.
type ConfirmationPacket_List struct{ capnp.List }

// NewConfirmationPacket creates a new list of ConfirmationPacket.
func NewConfirmationPacket_List(s *capnp.Segment, sz int32) (ConfirmationPacket_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return ConfirmationPacket_List{l}, err
}

func (s ConfirmationPacket_List) At(i int) ConfirmationPacket {
	return ConfirmationPacket{s.List.Struct(i)}
}

func (s ConfirmationPacket_List) Set(i int, v ConfirmationPacket) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ConfirmationPacket_List) String() string {
	str, _ := text.MarshalList(0x89b5686804357bc6, s.List)
	return str
}

// ConfirmationPacket_Future is a wrapper for a ConfirmationPacket promised by a client call.
type ConfirmationPacket_Future struct{ *capnp.Future }

func (p ConfirmationPacket_Future) Struct() (ConfirmationPacket, error) {
	s, err := p.Future.Struct()
	return ConfirmationPacket{s}, err
}

func (p ConfirmationPacket_Future) BotUser() User_Future {
	return User_Future{Future: p.Future.Field(0, nil)}
}

const schema_824b0dcb3e553a2a = "x\xda\x94Uo\x88\x14e\x18\x7f~\xef;\xbb\xee\xc2" +
	"\xad{\xc3l$\x87\xb2\xd0';*\xd4K\x8c\xfb\xd0" +
	"\x99\x97\xa4\xa5y\xef\xa6dR\xe0\xb4\xfb\xba\x8e\xee\xcc" +
	",3\xb3Rd\x1dD\x10\x82\x11\x14\xa1BB\x82\x85" +
	"E\xf9\x8f\x8c\xb2\x8c32\x94\xf4C\x7f\xae\xa0o\x07" +
	"\x96\x1f\xea\xa8\x83\x82\xbeM\xbc\xb3\x7ffnn\xd1\xfc" +
	"\xf6\xf2\xeeo\x9f\xf7y~\x7f\x9eY\xb1\x8c\xafe+" +
	"3k\xb2DbC&\x1b~\xf3\xc2jm\xf7\xees" +
	"\x07H/ \x1c\x1e\xdd\xf6\xe0\xb7\x85\xc7^\xa6\x0c_" +
	"D4\x02\xce`\x14\xd4\xd1\xc8\xf3S\x84\xf0\xf2\xf7\xbf" +
	"\xbd5\xf1\xd4\x8d7S`(\xf0\x19\x05\xbe\x10\x81?" +
	"\xe3c\x84\xf0\xdc\x99C\xc3\x8f\xfc\xb0\xec\x10\xe9\x05\x16" +
	"\x83\x09\xc6,?k\xfc\x13\x01\xe7\xf8\x16B8\xb5\xf4" +
	"\xb5\x0d\x07\xf7O\x1f#Q@\xba\x07#\xa3\xbda\x14" +
	"\xb4\xa8\x05\xed\x06!<}\xaa\xc0\xc6\x97\xdf\x7f:\x0d" +
	"V\x90\x91\x19m\x08\xc6\\t\x9c\xd5^\x07!\x1c\xfa" +
	"D;p\xf4\xe4\xf3gR\xf0\xa8\xe0\x91\xecy\xe3X" +
	"V\x9d\x8efU\xc3\xf6\xe1\xa1\xdfO\x1a;\xa6\xd3\xa5" +
	"3\x0ar1\xfb\x8bqM\x81G\xaed\x9fT\x95\xaf" +
	"\xbe\xb4\x81\xfd\xd8\xfa\xf3\xa74\x9a)\xf4\xbd\xb9\xaf\x8c" +
	"\xd59uZ\x99S\xc4\xdd=\xf5\xc0\x97\x8dC\xeb\xe7" +
	"\x16pq-w\xde\x98\x8e\x80\xdf\xe5\xd6\x10\xc2\xd1;" +
	"Wh\xaf\xbe\xf2\xde\\?.F\xa6sC0~\x8d" +
	"\xd039E\x06\xff\xfc ~~\xf1\x9e\xbf\xfb\x88g" +
	"\\\xc8\x7f`\\\xcaG\xad\xe7O\xd1\xe3a\xd3\xac\xee" +
	"\x95\xc1}Un6\x9d\xe6\xe8\xb8\xeb\xec\xb2<\xdb\x0c" +
	",\xd7\x99\x88~\xa1\x09@\x0cp\x8dH\x03\x91\xbe~" +
	"\x1d\x91X\xcb!61\xe8@\x09\xear\xa3\xba|\x98" +
	"CL0\xe8\x8c\x95\xc0\x88\xf4\xcd\xab\x94\x958D\x8d" +
	"a\xf2Y7\xd8\xe6K\x0f\x83\xb1\xaa\x04\x0c\x12&\x03" +
	"\xcf\xaa\xd7\xa5\x87\x01b\x18 \x94[\xbe\xf4|,&" +
	"Lp\xa4\xe0\x8b\x09\xa9v+\xb2n\xf9\x81\x97nW" +
	"\xeb\xb5[x\x94H\x0cp\x88\xe5\x0ca\xd5\xb5m\xd3" +
	"\xa9\xf9D\x14?\xd0\xe3*\xf5\x00\xa2\x07\xb6\xf9\xb2\xec" +
	"U\xdc\x86\x8cX\x88\xe6Z\xb6NA\xf5;\xee\"\x02" +
	"\xd3\x0b\xab\x88&=Yo5Lo\x91\xed\xd6\xcaf" +
	"\xcd\xb6\x9c\x85U\xe0\xa9\x0a\x83\xbd\xc6\xcca\"\xf14" +
	"\x87\xd8\x9d\xe0Q\x0e\x11\x89\x9d\x1c\xa2\xc1\x80\x0e\x8d\x96" +
	"\x02\xd68D\x93A\xe7\xac\x04N\xa4\xdbj\xac\x06\x87" +
	"x\x8e\xa1\xe8X\xd5\xbd]\xfa\xb8U\xeb\x1e\x8b\x9e\xdb" +
	"\x90(\xc6y#\xa0H\x08\xf7\xb8\x96#k\x0f\x05\x8a" +
	"\x85\xc18\x08m9R\xfcnt\xaa\xaem9\xf5\xcd" +
	"\xd2\xf7\xcd\xbaT\x14s\x19\xa8I\x96\xf6&9W!" +
	"\x12\x1fs\x88\xa9\xc4$\x17\x94#>\xe5\x10_'\x1c" +
	"qq\x94H|\xc1!.3\x80\xb7'\xb9\xa4\x80S" +
	"\x1c\xe2*\x83\xae\xf1\x124\"\xfd\xca\x0e\"q\x99C" +
	"\\g\xd03(!C\xa4\xcf\x9c%\x12\xd79\xc4_" +
	"\x0cz\x96\x95\x90%\xd2g\x15\x11\x7fp\x88\x7f\x19\xc2" +
	"\xc0\xb2\xa5\x1f\x986\xa1\xb9p\xb2I\xbb=C\x97\x9e" +
	"1_:\xb5\xbe\x8elz\xd6>3\x90\x001\xa8D" +
	"{\xb2j5-\xe9\x10\x0fnbL[:\xca\x85>" +
	"\xc6]\xc7\x91\xd5\xc0-{\x91\xe3\xbbU\xac\x0e\x95\x8a" +
	"\xf6\xee\xdd|\x97l\xb5\xec\xb1\xa8\xfff\xca\xc3{:" +
	"\x1e^\xc2\x10\xdaV\xa3a\xf9\xb2JE\xd7\xa9\xf9\xc8" +
	"\x13C>Q\x89uR\x1c\x19=!\xd7\x92^\xb5#" +
	"J\xae\xc3\x1c\xe2xB\xaecJ\x85\xb79\xc4\x89\x84" +
	"\\\xef*\xb9\xde\xe1\x10\x1f\xc6r\xbd\xaf\x80\xc79\xc4" +
	"\xe9\x84\\\x1f)\x8b\x9e\xe8\x88\x9d\xd1\xdar]\xac\xc4" +
	"\xc2\xdeB\x99N.o[\x99\xa2\xe9\xd5{\x8a\xa8?" +
	"+\x1dL\xaf\xfeD\xe0Y\x0e\xa1\xde-\x98bG\xc9" +
	"\xd2\x7f\xb7U\xe25\xd6e\xa6\xb7\xc5\xb6*f\xd0f" +
	"F\xa8\x817q\x88\xed\xb7\x9a\xad,\xf7I'@1" +
	"\xde\xf4\xed\x14\x16[}\xb7\xe1\xc2\xbd1\xe6\xadW\x15" +
	"T\xa3\xb9\xe8m}4Z?\xf9a\xa2\xb1v\x94\x8b" +
	"\x0d\xb9+H\x05wK+\xa8\xbb}\x83\x9bXA\x95" +
	"x\xdb\xf4\x9c`\xadK\xac\x9b\xae\x13\xecJ\xbcn\xba" +
	"Nh)`\x93C\xec\xbf\xdd\xe4\xc5\x81B\xf0?\xe2" +
	"7\x9f\x92q\xd7.F\xde\x9e\xaf\xdc\xf0\xcd\xbeJ;" +
	"\x13\xa3<\xa3\xf4\xdc\xde\xfe*\x15\x1d\xd3\xeeu5i" +
	"6,\xd3\x97i?\x95[\xc9\xd6\xff\x0b\x00\x00\xff\xff" +
	"\x96\xc6+\xd9"

func init() {
	schemas.Register(schema_824b0dcb3e553a2a,
		0x89b5686804357bc6,
		0x93e7595095e6d2c8,
		0x971dd3472a97b1b5,
		0xa1d57c8c488d1cc0,
		0xb0342843020dafb0,
		0xb179ae9d8904b61a,
		0xd55a13aeeb1a986d,
		0xd6ef75d402487ecc,
		0xf145976cbe38c029,
		0xf1a684870430173a,
		0xf42c7dd7018cbb03)
}
